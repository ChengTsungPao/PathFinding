{"version":3,"sources":["Frontend/HeaderHelper/Logo.js","Frontend/TableHelper/TableIndex.js","Core/index.js","HOC/Colored.js","Frontend/TableHelper/SetTable.js","Frontend/TableHelper/WhichComp.js","Frontend/TableHelper/Animation.js","Core/Queue.js","Core/Distance.js","Backend/Algorithms/BFS.js","Backend/Algorithms/DFS.js","Backend/Algorithms/Dijkstra.js","Backend/Algorithms/Astar.js","Backend/Algorithms/GreedyBestFirstSearch.js","Backend/Algorithms/Swarm.js","Backend/Algorithms/ConvergentSwarm.js","Backend/Algorithms/BidirectionSwarm.js","Frontend/TableHelper/UpdateTable.js","Frontend/TableHelper/ButtonEvent.js","Frontend/HeaderHelper/DropdownAlgorithm.js","Backend/Maze/Simple_Stair_Pattern.js","Backend/Maze/Core.js","Backend/Maze/Binary_Tree.js","Backend/Maze/RecursiveDivision.js","Backend/Maze/RecursiveDivision_Horizontal.js","Backend/Maze/RecursiveDivision_Vertical.js","Backend/Maze/Kruskal.js","Frontend/HeaderHelper/DropdownMaze.js","Frontend/HeaderHelper/NavLink.js","HOC/Colored_AddButton.js","Frontend/HeaderHelper/NavAddBomb.js","Core/IsMount.js","Frontend/HeaderHelper/NavButton.js","Frontend/HeaderHelper/NavClearBoard.js","Frontend/HeaderHelper/DropdownSpeed.js","Frontend/Header.js","Frontend/TableHelper/RestrictComp.js","Frontend/TableHelper/KeyboardEvent.js","Frontend/TableHelper/MouseEvent.js","Frontend/TableHelper/TableUI.js","Frontend/TableHelper/WeightModal.js","Frontend/Table.js","Frontend/HeaderHelper/Info.js","Frontend/HeaderHelper/AlgorithmDescriptor.js","Frontend/HeaderHelper/IntroductionModal.js","App.js","reportWebVitals.js","index.js"],"names":["logo","Navbar","Brand","href","className","adjustSize","size","tableVar","rowSize","Math","floor","window","screen","availHeight","colSize","availWidth","id","newId","weightValueRange","componentKind","add","wall","weight","weightSearchBomb","weightSearch","weightPath","start","startSearchBomb","startSearch","startPath","end","endSearchBomb","endSearch","endPath","bomb","bombSearchBomb","bombSearch","bombPath","search","searchBomb","path","weightStatic","weightSearchBombStatic","weightSearchStatic","weightPathStatic","startStatic","startPathStatic","endStatic","endPathStatic","bombStatic","bombPathStatic","searchStatic","searchBombStatic","pathStatic","pathHead","background","keyboardSupport","plus","sub","w","down","synchronize","update","algorithm","touchContext","createContext","touchInitial","touchReducer","state","action","under","moveContext","moveReducer","updateContext","updateReducer","weightValueContext","weightValueInitial","value","status","weightValueReducer","position","weightValue","sysStatusContext","React","initialsysStatus","sysStatusReducer","bombContext","bombInitial","bombReducer","speedContext","speedInitial","speedReducer","algorithmContext","algorithmReducer","Colored","sysStatus","useContext","useState","isHover","setIsHover","setClassName","get","setTable","index","kind","setPosition","document","getElementById","toString","pos","addComponentKind","WhichComponent","touch","parseInt","type","rKind","WhichComponentSame","StartEndBombWeight","Animation","arr","speed","count","myCallbackFunction","newid","arrAnimation","setInterval","length","clearInterval","SearchBombAnimation","sysStatusFunction","searchBombAnimation","PathAnimation","i","SearchAnimation","searchAnimation","FinalAnimation","j","Queue","this","queue","val","push","isEmpty","shift","Distance","dict","max_d","d","max","endPos","shortest","x","y","visited","Set","curD","Infinity","curX","curY","has","unshift","BFS","startCallback","times","retSearchPath","retBombPath","retShortestPath","searchPath","distance","startPos","set","append","getLength","node","popleft","nextD","pop","getShortestPath","concat","DFS","DoDFS","level","clear","DoDijkstra","weights","current_shortest_path","PriorityQueue","table","enqueue","isFoundEnd","curPos","dequeue","forEach","nextPos","tmp","curShortestPath","Dijkstra","DoAStar","unvisited","GetClosestNode","idx","total","GetScore","GetHeuristic","abs","retPos","retIndex","splice","direction","score","Astar","DoGreedyBestFirstSearch","GreedyBestFirstSearch","DoSwarm","pow","Swarm","DoConvergentSwarm","ConvergentSwarm","BidirectionSwarm","which","actualEnd","console","log","DoBidirectionSwarm","UpdateTable","Start","ClearPath","ButtonEvent","sysSpeed","event","Addbomb","RemoveBomb","ClearWalls","ClearBoard","CreateMaze","maze","MazeAnimation","DropdownAlgorithm","algoContext","toggleHandler","buttonEvent","Nav","Item","NavDropdown","xs","title","onSelect","eventKey","DropdownAlgorithmHandler","onMouseEnter","onMouseLeave","Simple_Stair_Pattern","walls","towardUp","CreateAround","wallSet","Binary_Tree","random","DoRecursiveDivision","width","height","door","round","randomX","Random_0_to_n","_y","randomY","_x","n","RecursiveDivision","boolDirection","RecursiveDivision_Horizontal","RecursiveDivision_Vertical","FindRoot","parentArray","Union","rankArray","index1","index3","RandomEven","Kruskal","parent","rank","x1","x2","xHead","yHead","DropdownMaze","speedStatus","alert","NavLink","names","handlers","whichHandler","setWhichHandler","Link","onClick","preWhichHandler","algoStatus","NavAddBomb","isMount","useRef","useEffect","current","IsMount","NavButton","buttonName","setButtonName","myVariant","setMyVariant","algoName","Button","variant","NavClearBoard","DropdownSpeed","setTitle","Header","collapseOnSelect","expand","bg","Logo","Toggle","aria-controls","Collapse","RestrictComp","KeyboardEvent","key","MouseEvent","move","addEventListener","MouseDownHandler","e","preventDefault","target","whichComponent","MouseUpHandler","OnMouseEnterHanlder","whichOldComponent","whichNewComponent","TableUI","row","Array","from","keys","col","mouesEvent","createTable","map","rowIndex","colIndex","onMouseUp","onMouseDown","align","border","cellSpacing","WeightModal","initShow","setInitShow","show","setShow","setTimeout","Modal","onHide","dialogClassName","Body","Row","Col","ProgressBar","now","label","Table","Spinner","animation","Info","bannedBomb","setBannedBomb","bannedBFSDFS","setBannedBFSDFS","AlgorithmDescriptor","algorithmName","setAlgorithmName","discription1","setDiscription1","discription2","setDiscription2","d1","d2","IntroductionModal","pages","setPages","language","setLanguage","checked","setChecked","maxPages","data","backdrop","centered","Footer","onlabel","onstyle","offlabel","offstyle","style","onChange","pre","prePage","App","useReducer","curAlgorithm","setCurAlgorithm","curSysStatus","setCurSysStatus","curBomb","setCurBomb","curSpeed","setCurSpeed","setTouch","setMove","setUpdate","setWeightValue","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.815c289a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Navbar } from 'react-bootstrap';\r\n\r\nfunction logo() {\r\n    return (\r\n        <Navbar.Brand href=\"/PathFinding/\" className='Navbar-logo'>\r\n            {/* <img\r\n                src={process.env.PUBLIC_URL + '/logo.png'} // 取得public資料夾路徑\r\n                width=\"50\"\r\n                height=\"50\"\r\n                className='d-inline-block'\r\n                variant='test'\r\n                alt='Logo'\r\n            /> {' '} */}\r\n                    Path-Finding\r\n        </Navbar.Brand>\r\n    )\r\n}\r\n\r\nexport default logo\r\n","import { createContext } from 'react'\nimport { position } from '../../Core/index'\n\n\nconst size = 23\n\nfunction adjustSize(size) {\n    if (size % 2 === 0) {\n        size -= 1\n    }\n    return size\n}\n\nexport const tableVar = {\n    rowSize: adjustSize(Math.floor(window.screen.availHeight / size) - 16),\n    colSize: adjustSize(Math.floor(window.screen.availWidth / size)),\n    size: size,\n    id: 0,\n    newId: 0\n}\n\nexport const weightValueRange = {\n    max: 100,\n    min: 0,\n    init: 50,\n    increase: 10,\n    waiting: 2000\n}\n\nexport const componentKind = {\n    add: \"wall\",\n    wall: \"wall\",\n\n    /*---------dynamic---------*/\n\n    weight: \"weight\",\n    weightSearchBomb: \"weightSearchBomb\",\n    weightSearch: \"weightSearch\",\n    weightPath: \"weightPath\",\n\n    start: \"start\",\n    startSearchBomb: \"startSearchBomb\",\n    startSearch: \"startSearch\",\n    startPath: \"startPath\",\n\n    end: \"end\",\n    endSearchBomb: \"endSearchBomb\",\n    endSearch: \"endSearch\",\n    endPath: \"endPath\",\n\n    bomb: \"bomb\",\n    bombSearchBomb: \"bombSearchBomb\",\n    bombSearch: \"bombSearch\",\n    bombPath: \"bombPath\",\n\n    search: \"search\",\n    searchBomb: \"searchBomb\",\n    path: \"path\",\n\n    /*----------static-----------*/\n\n    weightStatic: \"weightStatic\",\n    weightSearchBombStatic: \"weightSearchBombStatic\",\n    weightSearchStatic: \"weightSearchStatic\",\n    weightPathStatic: \"weightPathStatic\",\n\n    startStatic: \"startStatic\",\n    startPathStatic: \"startPathStatic\",\n\n    endStatic: \"endStatic\",\n    endPathStatic: \"endPathStatic\",\n\n    bombStatic: \"bombStatic\",\n    bombPathStatic: \"bombPathStatic\",\n\n    searchStatic: \"searchStatic\",\n    searchBombStatic: \"searchBombStatic\",\n    pathStatic: \"pathStatic\",\n\n    /*----------------------------*/\n\n    pathHead: \"pathHead\",\n    background: \"background\"\n}\n\nexport const keyboardSupport = {\n    plus: \"+\",\n    sub: \"-\",\n\n    w: \"w\",\n    down: true,\n}\n\nexport const synchronize = {\n    update: true,\n    algorithm: \"\"\n}\n\n// touch status\nexport const touchContext = createContext()\nexport const touchInitial = { start: componentKind.background, end: componentKind.background, bomb: componentKind.background }\nexport const touchReducer = (state, action) => {\n    switch (action.componentKind) {\n        case componentKind.start:\n            return { ...state, start: action.under }\n        case componentKind.end:\n            return { ...state, end: action.under }\n        case componentKind.bomb:\n            return { ...state, bomb: action.under }\n        default:\n            return touchInitial\n    }\n}\n\n// move component\nexport const moveContext = createContext()\nexport const moveInitial = \"\"\nexport const moveReducer = (state, action) => {\n    switch (action) {\n        case componentKind.start:\n            return action\n        case componentKind.end:\n            return action\n        case componentKind.bomb:\n            return action\n        case componentKind.wall:\n            return action\n        case componentKind.weight:\n            return action\n        default:\n            return moveInitial\n    }\n}\n\n// result update status\nexport const updateContext = createContext()\nexport const updateInitial = false\nexport const updateReducer = (state, action) => {\n    switch (action) {\n        case \"True\":\n            return true\n        case \"False\":\n            return false\n        default:\n            return updateInitial\n    }\n}\n\nexport const weightValueContext = createContext()\nexport const weightValueInitial = { value: weightValueRange.init, status: true }\nexport const weightValueReducer = (state, action) => {\n    switch (action) {\n        case \"+\":\n            position.weightValue = state.value + weightValueRange.increase\n            return { value: position.weightValue, status: true }\n        case \"-\":\n            position.weightValue = state.value - weightValueRange.increase\n            return { value: position.weightValue, status: true }\n        case true:\n            return { value: position.weightValue, status: true }\n        case false:\n            return { value: position.weightValue, status: false }\n        default:\n            return weightValueInitial\n    }\n}\n\n","import React from 'react'\r\nimport { tableVar, weightValueRange } from '../Frontend/TableHelper/TableIndex'\r\n\r\n// component position\r\nexport var position = {\r\n    start: [Math.floor(tableVar.rowSize / 2), Math.floor(tableVar.colSize / 4)],\r\n    end: [Math.floor(tableVar.rowSize / 2), tableVar.colSize - Math.floor(tableVar.colSize / 4)],\r\n    bomb: false,\r\n    wall: [],\r\n    weight: [],\r\n    weightValue: weightValueRange.init,\r\n    rowSize: tableVar.rowSize,\r\n    colSize: tableVar.colSize\r\n}\r\n\r\n\r\n// 目前系統狀態\r\nexport const sysStatusContext = React.createContext();\r\nexport const initialsysStatus = \"LOADING\";\r\nexport const sysStatusReducer = (state, action) => {\r\n    switch (action) {\r\n        case 'IDLE':\r\n            return 'IDLE';\r\n        case 'RUNNING':\r\n            return 'RUNNING';\r\n        case 'LOADING':\r\n            return 'LOADING';\r\n        default:\r\n            return initialsysStatus;\r\n    }\r\n}\r\n\r\n// Bomb status\r\nexport const bombContext = React.createContext();\r\nexport const bombInitial = false;\r\nexport const bombReducer = (state, action) => {\r\n    switch (action) {\r\n        case 'True':\r\n            return true;\r\n        case 'False':\r\n            return false;\r\n        default:\r\n            return bombInitial\r\n    }\r\n}\r\n\r\n// Speed\r\nexport const speedContext = React.createContext();\r\nexport const speedInitial = [\"Fast\", 1000];\r\nexport const speedReducer = (state, action) => {\r\n    switch (action) {\r\n        case 'Fast':\r\n            return [\"Fast\", 1000];\r\n        case 'Average':\r\n            return [\"Average\", 10000];\r\n        case 'Slow':\r\n            return [\"Slow\", 20000];\r\n        default:\r\n            return bombInitial\r\n    }\r\n}\r\n\r\n// 目前系統是哪種演算法\r\nexport const algorithmContext = React.createContext();\r\nexport const initialAlgorithm = \"\";\r\nexport const algorithmReducer = (state, action) => {\r\n    switch (action) {\r\n        case 'Algorithm_Dijkstra':\r\n            return 'Algorithm_Dijkstra';\r\n        case 'Algorithm_AStar':\r\n            return 'Algorithm_AStar';\r\n        case \"Algorithm_Greedy_Best_First\":\r\n            return 'Algorithm_Greedy_Best_First';\r\n        case \"Algorithm_Swarm\":\r\n            return 'Algorithm_Swarm';\r\n        case \"Algorithm_Convergent_Swarm\":\r\n            return 'Algorithm_Convergent_Swarm';\r\n        case \"Algorithm_Bidrectional_Swarm\":\r\n            return 'Algorithm_Bidrectional_Swarm';\r\n        case \"Algorithm_Breadth_First\":\r\n            return 'Algorithm_Breadth_First';\r\n        case \"Algorithm_Depth_First\":\r\n            return 'Algorithm_Depth_First';\r\n        default:\r\n            return initialAlgorithm;\r\n    }\r\n}","import { useState, useContext } from 'react';\nimport { sysStatusContext } from '../Core';\nimport '../App.scss';\n\nconst Colored = () => {\n    const sysStatus = useContext(sysStatusContext);\n    const [isHover, setIsHover] = useState(false);\n    const [className, setClassName] = useState(\"nav-link-default\");\n\n    const toggleHandler = () => {\n        if (isHover) {\n            setClassName(\"nav-link-default\");\n            setIsHover(false);\n        } else {\n            if (sysStatus.get !== \"IDLE\") {\n                setClassName(\"nav-link-red\");\n            } else {\n                setClassName(\"nav-link-green\");\n            }\n            setIsHover(true);\n        }\n    }\n\n    return [className, toggleHandler];\n}\n\nexport default Colored\n","import { componentKind, tableVar } from './TableIndex'\nimport { position } from '../../Core/index'\n\n\nexport function setTable(index, kind, setPosition = false){\n\n    if(typeof index !== \"number\"){\n        index = index[0] * tableVar.colSize + index[1]\n    }\n\n    if(index < 0){\n        return\n    }\n\n    document.getElementById(index.toString()).className = kind\n\n    if(setPosition){\n\n        const pos = [Math.floor(index / tableVar.colSize), index % tableVar.colSize]\n\n        if(position.wall[pos]){\n            delete position.wall[pos]\n        }else if(position.weight[pos]){\n            delete position.weight[pos]\n        }\n    \n        if(kind === componentKind.wall){\n            position.wall[pos] = true\n        }else if(kind === componentKind.weight){\n            position.weight[pos] = true\n        }else if(kind === componentKind.start){\n            position.start = pos\n        }else if(kind === componentKind.end){\n            position.end = pos\n        }else if(kind === componentKind.bomb){\n            position.bomb = pos\n        }else if(kind === componentKind.background){\n            if(position.bomb[0] === pos[0] && position.bomb[1] === pos[1]){\n                position.bomb = false\n            }\n        }\n\n    }\n\n    // console.log(position)\n\n}","import { tableVar, componentKind } from './TableIndex'\nimport { position } from '../../Core/index'\n\n\nfunction addComponentKind(kind) {\n    switch (kind) {\n        case componentKind.add:\n            return componentKind.background\n        default:\n            return componentKind.add\n    }\n}\n\nexport function WhichComponent(id, touch){ // MouseEvent\n\n    var pos = id\n\n    if(typeof id === \"number\"){\n        pos = [Math.floor(parseInt(id) / tableVar.colSize), parseInt(id) % tableVar.colSize]\n    }\n\n    if(position.start[0] === pos[0] && position.start[1] === pos[1]){\n        return {kind: componentKind.start, touch: touch.get.start, type: 0}\n    }else if(position.end[0] === pos[0] && position.end[1] === pos[1]){\n        return {kind: componentKind.end, touch: touch.get.end, type: 0}\n    }else if(position.bomb !== false && position.bomb[0] === pos[0] && position.bomb[1] === pos[1]){\n        return {kind: componentKind.bomb, touch: touch.get.bomb, type: 0}\n    }else if(position.wall[pos]){\n        return {kind: componentKind.wall, rKind: addComponentKind(componentKind.wall), type: 1}\n    }else if(position.weight[pos]){\n        return {kind: componentKind.weight, rKind: addComponentKind(componentKind.weight), type: 1}\n    }else{\n        return {kind: componentKind.background, rKind: componentKind.add, type: 1}\n    }\n\n}\n\n\nexport function WhichComponentSame(id){\n\n    var pos = id\n\n    if(typeof id === \"string\" || typeof id === \"number\"){\n        pos = [Math.floor(parseInt(id) / tableVar.colSize), parseInt(id) % tableVar.colSize]\n    }\n\n    if(position.start[0] === pos[0] && position.start[1] === pos[1]){\n        return 0\n    }else if(position.end[0] === pos[0] && position.end[1] === pos[1]){\n        return 1\n    }else if(position.bomb !== false && position.bomb[0] === pos[0] && position.bomb[1] === pos[1]){\n        return 2\n    }else if(position.weight[pos]){\n        return 3\n    }else if(position.wall[pos]){\n        return 4\n    }else{\n        return 5\n    }\n\n}\n\nexport function StartEndBombWeight(type, start, end, bomb, weight){\n\n    switch (type) {\n        case 0:\n            return start\n        case 1:\n            return end\n        case 2:\n            return bomb\n        case 3:\n            return weight\n        default:\n            return null\n    }\n\n}","import { componentKind } from './TableIndex'\nimport { setTable } from './SetTable'\nimport { WhichComponentSame, StartEndBombWeight } from './WhichComp'\nimport { position } from '../../Core/index'\n\n\nexport function Animation(arr, speed, count, kind, myCallbackFunction = null) {\n    var [id, newid] = [-1, -1]\n    const arrAnimation = setInterval(() => {\n        if (count === arr.length) {\n            if(kind === componentKind.path){\n                setTable(newid, componentKind.path)\n            }\n            if (myCallbackFunction !== null) {\n                myCallbackFunction();\n            }\n            clearInterval(arrAnimation);\n        }else {\n            if (WhichComponentSame(arr[count]) > 3) {\n                if(kind === componentKind.path){\n                    newid = arr[count]\n                    setTable(id, componentKind.path)\n                    setTable(newid, componentKind.pathHead)\n                    id = newid\n                }else{\n                    setTable(arr[count], kind, true) // Maze\n                }\n            }else{\n                if(kind === componentKind.path){\n                    setTable(id, kind)\n                    setTable(arr[count], StartEndBombWeight(WhichComponentSame(arr[count]), componentKind.startPath, componentKind.endPath, componentKind.bombPath, componentKind.weightPath))\n                }\n            }\n        }\n        count += 1\n    }, speed / 2)\n}\n\nexport function SearchBombAnimation(search, bomb, path, speed, count, myCallbackFunction, sysStatusFunction) {\n    if(bomb.length === 0){\n        setTable(position.start, componentKind.startSearch)\n    }else{\n        setTable(position.start, componentKind.startSearchBomb)\n    }\n    const searchBombAnimation = setInterval(() => {\n        if (count === search.length) {\n            myCallbackFunction(bomb, path, speed, 0, PathAnimation, sysStatusFunction)\n            clearInterval(searchBombAnimation)\n        }else{\n            for(var i = 0;i < search[count].length;i++){\n                if (WhichComponentSame(search[count][i]) > 3) {\n                    if(bomb.length === 0){\n                        setTable(search[count][i], componentKind.search)\n                    }else{\n                        setTable(search[count][i], componentKind.searchBomb)\n                    }\n                }else{\n                    if(bomb.length === 0){\n                        setTable(search[count][i], StartEndBombWeight(WhichComponentSame(search[count][i]), componentKind.startSearch, componentKind.endSearch, componentKind.bombSearch, componentKind.weightSearch))\n                    }else{\n                        setTable(search[count][i], StartEndBombWeight(WhichComponentSame(search[count][i]), componentKind.startSearchBomb, componentKind.endSearchBomb, componentKind.bombSearch, componentKind.weightSearchBomb))\n                    }\n                }\n            }\n        }\n        count += 1\n    }, speed)\n}\n\nexport function SearchAnimation(bomb, path, speed, count, myCallbackFunction, sysStatusFunction) {\n    const searchAnimation = setInterval(() => {\n        if (count === bomb.length) {\n            myCallbackFunction(path, speed, 0, sysStatusFunction)\n            clearInterval(searchAnimation)\n        }else{\n            for(var i = 0;i < bomb[count].length;i++){\n                if (WhichComponentSame(bomb[count][i]) > 3) {\n                    setTable(bomb[count][i], componentKind.search)\n                }else{\n                    setTable(bomb[count][i], StartEndBombWeight(WhichComponentSame(bomb[count][i]), componentKind.startSearch, componentKind.endSearch, componentKind.bombSearch, componentKind.weightSearch))\n                }\n            }\n        }\n        count += 1\n    }, speed)\n}\n\nexport function PathAnimation(path, speed, count, myCallbackFunction = null) {\n    Animation(path, speed, count, componentKind.path, myCallbackFunction)\n}\n\nexport function MazeAnimation(maze, speed, count, myCallbackFunction = null) {\n    Animation(maze, speed, count, componentKind.wall, myCallbackFunction)\n}\n\nexport function FinalAnimation(search, path, bomb){\n    if(bomb.length === 0){\n        setTable(position.start, componentKind.searchStatic) \n    }else{\n        setTable(position.start, componentKind.searchBombStatic)\n    }\n    for (var i = 0; i < search.length; i++) {\n        for (var j = 0; j < search[i].length; j++) {\n            if (WhichComponentSame(search[i][j]) >= 5) {\n                if(bomb.length === 0){\n                    setTable(search[i][j], componentKind.searchStatic)\n                }else{\n                    setTable(search[i][j], componentKind.searchBombStatic)\n                }\n            }else if(WhichComponentSame(search[i][j]) === 3){\n                if(bomb.length === 0){\n                    setTable(search[i][j], componentKind.weightSearchStatic)\n                }else{\n                    setTable(search[i][j], componentKind.weightSearchBombStatic)\n                }\n            }\n        }\n    }\n    for (i = 0; i < bomb.length; i++) {\n        for (j = 0; j < bomb[i].length; j++) {\n            if (WhichComponentSame(bomb[i][j]) >= 5) {\n                setTable(bomb[i][j], componentKind.searchStatic)\n            }else if(WhichComponentSame(bomb[i][j]) === 3){\n                setTable(bomb[i][j], componentKind.weightSearchStatic)\n            }\n        }\n    }\n    for (i = 0; i < path.length; i++) {\n        if (WhichComponentSame(path[i]) > 3) {\n            setTable(path[i], componentKind.pathStatic)\n        }else{\n            setTable(path[i], StartEndBombWeight(WhichComponentSame(path[i]), componentKind.startPathStatic, componentKind.endPathStatic, componentKind.bombPathStatic, componentKind.weightPathStatic))\n        }\n    }\n}","class Queue {\n    constructor() {\n        this.queue = [];\n    }\n\n    append(val) {\n        this.queue.push(val);\n    }\n\n    popleft() {\n        if (this.isEmpty()) return -1;\n        return this.queue.shift();\n    }\n\n    isEmpty() {\n        return this.queue.length === 0;\n    }\n\n    getLength() {\n        return this.queue.length;\n    }\n\n    getArray() {\n        return this.queue;\n    }\n}\n\nexport default Queue;","class Distance {\n    constructor() {\n        this.dict = {};\n        this.max_d = 0;\n    }\n\n    // pos=[x, y], d=距離\n    set(pos, d) {\n        this.dict[pos] = d;\n        this.max_d = Math.max(this.max_d, d);\n    }\n\n    // 取得距離\n    get(pos) {\n        if (pos in this.dict) {\n            return this.dict[pos];\n        } else {\n            return -1;\n        }\n    }\n\n    // 從end開始找尋附近四周圍，第一個 \"有被找過的\" 且 \"距離最小的\"的點，並回傳一個array\n    getShortestPath(endPos) {\n        if (!(endPos in this.dict)) return []; // 若終點沒被找過，就回傳空值\n\n        var shortest = [endPos];\n        var x = endPos[0];\n        var y = endPos[1];\n        var visited = new Set();\n\n        visited.add(endPos.toString());\n        while (this.max_d > 0) {\n            var curD = Infinity;\n            var curX = x;\n            var curY = y;\n\n            // up\n            if ([x - 1, y] in this.dict && !(visited.has([x - 1, y].toString()))) {\n                if (this.dict[[x - 1, y]] < curD) {\n                    curX = x - 1;\n                    curY = y;\n                    curD = this.dict[[x - 1, y]];\n                }\n                visited.add([x - 1, y].toString());\n            }\n\n            // right\n            if ([x, y + 1] in this.dict && !(visited.has([x, y + 1].toString()))) {\n                if (this.dict[[x, y + 1]] < curD) {\n                    curX = x;\n                    curY = y + 1;\n                    curD = this.dict[[x, y + 1]];\n                }\n                visited.add([x, y + 1].toString());\n            }\n\n            // down\n            if ([x + 1, y] in this.dict && !(visited.has([x + 1, y].toString()))) {\n                if (this.dict[[x + 1, y]] < curD) {\n                    curX = x + 1;\n                    curY = y;\n                    curD = this.dict[[x + 1, y]];\n                }\n                visited.add([x + 1, y].toString());\n            }\n\n            // up\n            if ([x, y - 1] in this.dict && !(visited.has([x, y - 1].toString()))) {\n                if (this.dict[[x, y - 1]] < curD) {\n                    curX = x;\n                    curY = y - 1;\n                    curD = this.dict[[x, y - 1]];\n                }\n                visited.add([x, y - 1].toString());\n            }\n            x = curX;\n            y = curY;\n            shortest.unshift([x, y]);\n            this.max_d = curD;\n        }\n        if (shortest.length === 1) return []; // 如果沒有找到路徑(只有終點自己)，則不用跑最短路徑\n        return shortest;\n    }\n\n    clear() {\n        this.dict = {};\n        this.max_d = 0;\n    }\n}\n\nexport default Distance;","import { position } from '../../Core';\nimport Queue from '../../Core/Queue';\nimport Distance from '../../Core/Distance';\n\nfunction BFS(startCallback, speed) {\n    var times = 1 + (position.bomb === false ? 0 : 1); // 如果有bomb要執行2次\n    var retSearchPath = [];\n    var retBombPath = [];\n    var retShortestPath = [];\n\n    for (var i = 0; i < times; i++) {\n        var searchPath = [];\n        const visited = new Set();\n        const queue = new Queue();\n        var distance = new Distance();\n        var startPos = i === 0 ? position.start : position.bomb; // 第一次執行start，第二次bomb\n        var endPos = i === 0 && times > 1 ? position.bomb : position.end; // 第一次執行bomb，第二次end\n\n        distance.set(startPos, 0); // 加入自己\n        queue.append([startPos, 0]); // [pos, 距離]\n        visited.add(startPos.toString()); // 防止重複找尋\n        while (queue.getLength() > 0) {\n            var node = queue.popleft();\n            var x = node[0][0];\n            var y = node[0][1];\n            var nextD = node[1] + 1;\n\n            if (nextD > searchPath.length) searchPath.push([]); // 若有新的長度就增加array\n\n            if ([x, y].toString() === endPos.toString()) break; // 若找到終點就跳出\n\n            // left\n            if (y - 1 >= 0 && !([x, y - 1] in position.wall) && !(visited.has([x, y - 1].toString()))) {\n                queue.append([[x, y - 1], nextD]);\n                searchPath[nextD - 1].push([x, y - 1]);\n                distance.set([x, y - 1], nextD);\n                visited.add([x, y - 1].toString());\n            }\n\n            // up\n            if (x - 1 >= 0 && !([x - 1, y] in position.wall) && !(visited.has([x - 1, y].toString()))) {\n                queue.append([[x - 1, y], nextD]);\n                searchPath[nextD - 1].push([x - 1, y]);\n                distance.set([x - 1, y], nextD);\n                visited.add([x - 1, y].toString());\n            }\n\n            // right\n            // 這裡的position.rowSize怪怪的\n            if (y + 1 < position.colSize && !([x, y + 1] in position.wall) && !(visited.has([x, y + 1].toString()))) {\n                queue.append([[x, y + 1], nextD]);\n                searchPath[nextD - 1].push([x, y + 1]);\n                distance.set([x, y + 1], nextD);\n                visited.add([x, y + 1].toString());\n            }\n\n            // down\n            // 這裡的position.colSize怪怪的\n            if (x + 1 < position.rowSize && !([x + 1, y] in position.wall) && !(visited.has([x + 1, y].toString()))) {\n                queue.append([[x + 1, y], nextD]);\n                searchPath[nextD - 1].push([x + 1, y]);\n                distance.set([x + 1, y], nextD);\n                visited.add([x + 1, y].toString());\n            }\n\n        }\n\n        // 去除多找的一圈\n        while (distance.get(endPos) !== -1 && searchPath.length > distance.get(endPos)) {\n            searchPath.pop();\n        }\n\n        // 取得最短路徑\n        var shortest = distance.getShortestPath(endPos);\n\n        if (i === 0) {\n            retSearchPath = retSearchPath.concat(searchPath);\n        } else {\n            retBombPath = retBombPath.concat(searchPath);\n        }\n        retShortestPath = retShortestPath.concat(shortest);\n\n        if (distance.get(endPos) === -1) break; // 如果第一次沒找到終點，直接跳出\n    }\n    // 執行 start 動畫\n    startCallback(retSearchPath, retShortestPath, speed, retBombPath);\n}\nexport default BFS;","import { position } from '../../Core';\nimport Distance from '../../Core/Distance';\n\nfunction DFS(startCallback, speed) {\n    var retSearchPath = [];\n    var retBombPath = [];\n    var retShortestPath = [];\n    // retSearchPath 會等於 retShortestPath\n\n    function DoDFS(x, y, endPos, visited, startPath, distance, level) {\n        if (x < 0 || y < 0 || x >= position.rowSize || y >= position.colSize || [x, y] in position.wall || visited.has([x, y].toString())) {\n            return false;\n        }\n\n        visited.add([x, y].toString());\n        startPath.push([[x, y]]); // 每一層都是一個\n        distance.set([x, y], level);\n\n        if ([x, y].toString() === endPos.toString()) return true;\n\n\n        if (DoDFS(x - 1, y, endPos, visited, startPath, distance, level + 1)) {// up\n            return true;\n        }\n        if (DoDFS(x, y + 1, endPos, visited, startPath, distance, level + 1)) {// right\n            return true;\n        }\n        if (DoDFS(x + 1, y, endPos, visited, startPath, distance, level + 1)) {// down\n            return true;\n        }\n        if (DoDFS(x, y - 1, endPos, visited, startPath, distance, level + 1)) {// left\n            return true;\n        }\n    }\n    const visited = new Set();\n    const distance = new Distance();\n    var start = position.start;\n    if (position.bomb) {\n        DoDFS(start[0], start[1], position.bomb, visited, retSearchPath, distance, 0);\n        start = position.bomb;\n        retShortestPath = retShortestPath.concat(distance.getShortestPath(position.bomb));\n        distance.clear();\n        visited.clear();\n\n        // 有找到最小路徑才繼續\n        if (retShortestPath.length > 0) {\n            DoDFS(start[0], start[1], position.end, visited, retBombPath, distance, 0);\n            retShortestPath = retShortestPath.concat(distance.getShortestPath(position.end));\n        }\n    } else {\n        DoDFS(start[0], start[1], position.end, visited, retBombPath, distance, 0);\n        retShortestPath = retShortestPath.concat(distance.getShortestPath(position.end));\n    }\n    startCallback(retSearchPath, retShortestPath, speed, retBombPath);\n}\n\nexport default DFS;","import { position } from '../../Core';\nimport PriorityQueue from 'javascript-priority-queue'; //https://www.npmjs.com/package/javascript-priority-queue\n\nfunction Dijkstra(startCallback, speed) {\n    var retSearchPath = [];\n    var retBombPath = [];\n    var retShortestPath = [];\n\n    if (position.bomb) {\n        retShortestPath = retShortestPath.concat(DoDijkstra(position.start, position.bomb, retSearchPath));\n\n        // 有找到最小路徑才繼續\n        if (retShortestPath.length > 0) {\n            retShortestPath = retShortestPath.concat(DoDijkstra(position.bomb, position.end, retBombPath));\n        }\n    } else {\n        retShortestPath = retShortestPath.concat(DoDijkstra(position.start, position.end, retSearchPath));\n    }\n    // 執行 start 動畫\n    startCallback(retSearchPath, retShortestPath, speed, retBombPath);\n}\n\n/// 回傳最短路徑\nfunction DoDijkstra(startPos, endPos, searchPath) {\n    /*  //https://medium.com/basecs/finding-the-shortest-path-with-a-little-help-from-dijkstra-613149fbdc8e\n        Create Dijkstra table \n        \n        table = {pos : [shortest distance, previous vertex]}\n            * start pos : [0, null]\n            * use priority queue to pick the pos which contains current shortest disance.\n    */\n\n    // 先假設權重都是1\n    var i, j;\n    var weights = {}\n    for (i = 0; i < position.rowSize; i++) {\n        for (j = 0; j < position.colSize; j++) {\n            weights[[i, j]] = 0;\n        }\n    }\n\n    var current_shortest_path = new PriorityQueue('min');\n    var table = {}\n\n    // 設定table: 起始點為0，其他為無限大，所有的previous vertex均為null\n    // 設定目前最短路徑的queue\n    for (i = 0; i < position.rowSize; i++) {\n        for (j = 0; j < position.colSize; j++) {\n            var pos = [i, j]\n            table[pos] = [Infinity, null]; // 起始點走到pos的最短距離，上一個點\n        }\n    }\n    table[startPos] = [0, null]; // 設定起始點\n    current_shortest_path.enqueue(startPos, 0); // 設定目前最短路徑的queue\n\n\n    /* 演算法開始 */\n    var isFoundEnd = false;\n    var visited = new Set();\n\n    while (current_shortest_path.size() > 0) {\n        // 1. 選出當前最小路徑的點 O(logn)\n        var curPos = current_shortest_path.dequeue();\n\n        // 2. 計算相鄰且尚未走過的點\n        // tmp = curPos.最短距離 + 走到下一點的權重\n        // 若 tmp < 下一點.最短距離 : 下一點.最短距離=tmp, 且previous vertex=curPos\n\n        var up = curPos[0] - 1 >= 0 ? [curPos[0] - 1, curPos[1]] : null;\n        var right = curPos[1] + 1 < position.colSize ? [curPos[0], curPos[1] + 1] : null;\n        var down = curPos[0] + 1 < position.rowSize ? [curPos[0] + 1, curPos[1]] : null;\n        var left = curPos[1] - 1 >= 0 ? [curPos[0], curPos[1] - 1] : null;\n\n        // eslint-disable-next-line\n        [up, right, down, left].forEach(nextPos => {\n            if (!nextPos || isFoundEnd || nextPos in position.wall) return; // 若超過邊界 or 已經找到終點了 or 是牆壁\n\n            var tmp = table[curPos][0] + (weights[nextPos] === 0 ? 1 : weights[nextPos]);\n            if (tmp < table[nextPos][0]) {\n                table[nextPos][0] = tmp;\n                table[nextPos][1] = curPos;\n            }\n            if (!visited.has(curPos.toString())) {\n                current_shortest_path.enqueue(nextPos, table[nextPos][0]); // 加入計算目前的最小的路徑\n\n            }\n\n            if (nextPos.toString() === endPos.toString()) { // 看是否找到終點了\n                isFoundEnd = true;\n            }\n        })\n\n        if (!visited.has(curPos.toString())) {\n            visited.add(curPos.toString()); // 加入已走過\n            searchPath.push([curPos]); // 加入搜尋範圍\n        }\n\n        if (isFoundEnd) { // 找到終點跳出\n            break;\n        }\n    }\n\n\n    // 若有找到終點再判斷最小路徑\n    var curShortestPath = []\n    if (isFoundEnd) {\n        curPos = endPos;\n        while (curPos) { // 因為找到start時的previous vertex為null\n            curShortestPath.unshift(curPos);\n            curPos = table[curPos][1];\n        }\n    }\n    return curShortestPath;\n}\n\nexport default Dijkstra;","import { position } from '../../Core';\n\nfunction Astar(startCallback, speed) {\n    var retSearchPath = [];\n    var retBombPath = [];\n    var retShortestPath = [];\n\n    if (position.bomb) {\n        retShortestPath = retShortestPath.concat(DoAStar(position.start, position.bomb, retSearchPath))\n\n        // 有找到最小路徑才繼續\n        if (retShortestPath.length > 0) {\n            retShortestPath = retShortestPath.concat(DoAStar(position.bomb, position.end, retBombPath))\n        }\n    } else {\n        retShortestPath = retShortestPath.concat(DoAStar(position.start, position.end, retSearchPath))\n    }\n    // 執行 start 動畫\n    startCallback(retSearchPath, retShortestPath, speed, retBombPath);\n}\n\n// 回傳最短路徑，update search\nfunction DoAStar(startPos, endPos, searchPath) {\n    // 先假設權重都是1\n    var i, j;\n    var weights = {}\n    for (i = 0; i < position.rowSize; i++) {\n        for (j = 0; j < position.colSize; j++) {\n            weights[[i, j]] = 0;\n        }\n    }\n\n    var unvisited = [];\n    var table = {};\n\n    // 設定table: 起始點為0，其他為無限大，所有的previous vertex均為null\n    // 設定目前最短路徑的queue\n    for (i = 0; i < position.rowSize; i++) {\n        for (j = 0; j < position.colSize; j++) {\n            var pos = [i, j];\n\n            // 起始點走到pos的最短距離，上一個點，direction，total距離\n            table[pos] = [Infinity, null, null, Infinity];\n        }\n    }\n    table[startPos] = [0, null, \"up\", 0]; // 設定起始點\n    unvisited.push(startPos); // 設定目前最短路徑的queue\n\n    /* 演算法開始 */\n    var isFoundEnd = false;\n    var visited = new Set();\n    searchPath.push([startPos]); // 加入搜尋範圍\n    while (unvisited.length > 0) {\n        // 1. 選出當前最小路徑的點\n        var curPos = GetClosestNode(table, unvisited, endPos);\n\n        if (curPos in position.wall) {\n            continue; // 牆壁不走\n        }\n\n        // 2. 計算相鄰且尚未走過的點\n        var up = curPos[0] - 1 >= 0 ? [curPos[0] - 1, curPos[1]] : null;\n        var right = curPos[1] + 1 < position.colSize ? [curPos[0], curPos[1] + 1] : null;\n        var down = curPos[0] + 1 < position.rowSize ? [curPos[0] + 1, curPos[1]] : null;\n        var left = curPos[1] - 1 >= 0 ? [curPos[0], curPos[1] - 1] : null;\n\n        // eslint-disable-next-line\n        [up, right, down, left].forEach((nextPos, idx) => {\n            if (!nextPos || isFoundEnd || nextPos in position.wall) return; // 若超過邊界 or 已經找到終點了 or 是牆壁\n\n            // 策略為：只考慮 目前總分+權重+轉向分數\n            // 且，走過的也要更新，只是不會加入unvisited，因此不會在上面continue\n            var total = table[curPos][0] + weights[nextPos] + GetScore(table[curPos][2], idx);\n            if (total < table[nextPos][0]) {\n                table[nextPos][0] = total;\n                table[nextPos][3] = table[nextPos][0] + GetHeuristic(nextPos, endPos);\n                table[nextPos][1] = curPos;\n                switch (idx) {\n                    case 0:\n                        table[nextPos][2] = \"up\";\n                        break;\n                    case 1:\n                        table[nextPos][2] = \"right\";\n                        break;\n                    case 2:\n                        table[nextPos][2] = \"down\";\n                        break;\n                    case 3:\n                        table[nextPos][2] = \"left\";\n                        break;\n                    default:\n                        break;\n                }\n            }\n\n            if (!visited.has(curPos.toString())) {\n                unvisited.push(nextPos);\n            }\n\n            if (nextPos.toString() === endPos.toString()) { // 看是否找到終點了\n                isFoundEnd = true;\n            }\n        })\n        if (!visited.has(curPos.toString())) {\n            searchPath.push([curPos]); // 加入搜尋範圍\n            visited.add(curPos.toString()); // 加入已走過\n        }\n\n        if (isFoundEnd) { // 找到終點跳出\n            break;\n        }\n    }\n\n    // 若有找到終點再判斷最小路徑\n    var curShortestPath = []\n    if (isFoundEnd) {\n        curPos = endPos;\n        while (curPos) { // 因為找到start時的previous vertex為null\n            curShortestPath.unshift(curPos);\n            curPos = table[curPos][1];\n        }\n    }\n    return curShortestPath;\n}\n\n// 推測值：用距離來表示，因為是棋盤，所以改成最短距離幾格\nfunction GetHeuristic(startPos, endPos) {\n    return Math.abs(endPos[0] - startPos[0]) + Math.abs(endPos[1] - startPos[1]);\n}\n\n// 找出分數最小點，策略：考慮所有的分數 目前總分+權重+轉向分數+估值\nfunction GetClosestNode(table, unvisited, endPos) {\n    let retPos, retIndex;\n    for (var i = 0; i < unvisited.length; i++) {\n        if (!retPos || table[retPos][3] > table[unvisited[i]][3]) {\n            retPos = unvisited[i];\n            retIndex = i;\n\n            // 若相等則取得 估值大的（距離目標遠的）\n        } else if (table[retPos][3] === table[unvisited[i]][3]) {\n            if (GetHeuristic(retPos, endPos) > GetHeuristic(unvisited[i], endPos)) {\n                retPos = unvisited[i];\n                retIndex = i;\n            }\n        }\n    }\n\n    unvisited.splice(retIndex, 1);\n    return retPos;\n}\n\nfunction GetScore(direction, index) {\n    var score = 0;\n    switch (direction) {\n        case \"up\":\n            switch (index) {\n                case 0:\n                    score = 1;\n                    break;\n                case 1:\n                    score = 2;\n                    break;\n                case 2:\n                    score = 3;\n                    break;\n                case 3:\n                    score = 2;\n                    break;\n                default:\n                    break;\n            }\n            break;\n        case \"right\":\n            switch (index) {\n                case 0:\n                    score = 2;\n                    break;\n                case 1:\n                    score = 1;\n                    break;\n                case 2:\n                    score = 2;\n                    break;\n                case 3:\n                    score = 3;\n                    break;\n                default:\n                    break;\n            }\n            break;\n        case \"down\":\n            switch (index) {\n                case 0:\n                    score = 3;\n                    break;\n                case 1:\n                    score = 2;\n                    break;\n                case 2:\n                    score = 1;\n                    break;\n                case 3:\n                    score = 2;\n                    break;\n                default:\n                    break;\n            }\n            break;\n        case \"left\":\n            switch (index) {\n                case 0:\n                    score = 2;\n                    break;\n                case 1:\n                    score = 3;\n                    break;\n                case 2:\n                    score = 2;\n                    break;\n                case 3:\n                    score = 1;\n                    break;\n                default:\n                    break;\n            }\n            break;\n        default:\n            break;\n    }\n    return score;\n}\n\nexport default Astar;","import { position } from '../../Core';\n\nfunction GreedyBestFirstSearch(startCallback, speed) {\n    var retSearchPath = [];\n    var retBombPath = [];\n    var retShortestPath = [];\n\n    if (position.bomb) {\n        retShortestPath = retShortestPath.concat(DoGreedyBestFirstSearch(position.start, position.bomb, retSearchPath));\n        retShortestPath = retShortestPath.concat(DoGreedyBestFirstSearch(position.bomb, position.end, retBombPath));\n    } else {\n        retShortestPath = retShortestPath.concat(DoGreedyBestFirstSearch(position.start, position.end, retSearchPath));\n    }\n    // 執行 start 動畫\n    startCallback(retSearchPath, retShortestPath, speed, retBombPath);\n}\n\nfunction DoGreedyBestFirstSearch(startPos, endPos, searchPath) {\n    // 先假設權重都是1\n    var i, j;\n    var weights = {}\n    for (i = 0; i < position.rowSize; i++) {\n        for (j = 0; j < position.colSize; j++) {\n            weights[[i, j]] = 1;\n        }\n    }\n\n    var unvisited = [];\n    var table = {};\n\n    // 設定table: 起始點為0，其他為無限大，所有的previous vertex均為null\n    // 設定目前最短路徑的queue\n    for (i = 0; i < position.rowSize; i++) {\n        for (j = 0; j < position.colSize; j++) {\n            var pos = [i, j];\n\n            // 起始點走到pos的最短距離，上一個點，direction，total距離\n            table[pos] = [Infinity, null, null, null];\n        }\n    }\n    table[startPos] = [0, null, \"up\", 0]; // 設定起始點\n    unvisited.push(startPos); // 設定目前最短路徑的queue\n\n    /* 演算法開始 */\n    var isFoundEnd = false;\n    var visited = new Set();\n    searchPath.push([startPos]); // 加入搜尋範圍\n    while (unvisited.length > 0) {\n        // 1. 選出當前最小路徑的點\n        var curPos = GetClosestNode(table, unvisited, endPos);\n\n        if (curPos in position.wall) {\n            continue; // 牆壁不走\n        }\n\n        // 2. 計算相鄰且尚未走過的點\n        var up = curPos[0] - 1 >= 0 ? [curPos[0] - 1, curPos[1]] : null;\n        var right = curPos[1] + 1 < position.colSize ? [curPos[0], curPos[1] + 1] : null;\n        var down = curPos[0] + 1 < position.rowSize ? [curPos[0] + 1, curPos[1]] : null;\n        var left = curPos[1] - 1 >= 0 ? [curPos[0], curPos[1] - 1] : null;\n\n        // eslint-disable-next-line\n        [up, right, down, left].forEach((nextPos, idx) => {\n            if (!nextPos || isFoundEnd || nextPos in position.wall) return; // 若超過邊界 or 已經找到終點了 or 是牆壁\n\n            // 策略為：只考慮 估值+轉向分數\n            var total = table[curPos][0] + GetScore(table[nextPos][2], idx);\n            if (total < table[nextPos][0]) {\n                table[nextPos][0] = GetHeuristic(nextPos, endPos);\n                table[nextPos][1] = curPos; // 因為table[0]現在是heuristic（因此不更新），所以四周圍直接更新成目前的點就行\n                switch (idx) {\n                    case 0:\n                        table[nextPos][2] = \"up\";\n                        break;\n                    case 1:\n                        table[nextPos][2] = \"right\";\n                        break;\n                    case 2:\n                        table[nextPos][2] = \"down\";\n                        break;\n                    case 3:\n                        table[nextPos][2] = \"left\";\n                        break;\n                    default:\n                        break;\n                }\n            }\n            if (!visited.has(curPos.toString())) {\n                unvisited.push(nextPos);\n            }\n\n            if (nextPos.toString() === endPos.toString()) { // 看是否找到終點了\n                isFoundEnd = true;\n            }\n        })\n        if (!visited.has(curPos.toString())) {\n            visited.add(curPos.toString()); // 加入已走過\n            searchPath.push([curPos]); // 加入搜尋範圍\n        }\n        if (isFoundEnd) { // 找到終點跳出\n            break;\n        }\n    }\n\n    // 若有找到終點再判斷最小路徑\n    var curShortestPath = []\n    if (isFoundEnd) {\n        curPos = endPos;\n        while (curPos) { // 因為找到start時的previous vertex為null\n            curShortestPath.unshift(curPos);\n            curPos = table[curPos][1];\n        }\n    }\n    return curShortestPath;\n}\n\n// 推測值：用距離來表示，因為是棋盤，所以改成最短距離幾格\nfunction GetHeuristic(startPos, endPos) {\n    return Math.abs(endPos[0] - startPos[0]) + Math.abs(endPos[1] - startPos[1]);\n}\n\n// 找出分數最小點，策略：考慮所有的GetHeuristic\nfunction GetClosestNode(table, unvisited, endPos) {\n    let retPos, retIndex;\n    for (var i = 0; i < unvisited.length; i++) {\n        if (!retPos || table[retPos][0] > table[unvisited[i]][0]) {\n            retPos = unvisited[i];\n            retIndex = i;\n\n            // 若相等則取得 估值大的（距離目標遠的）\n        } else if (table[retPos][0] === table[unvisited[i]][0]) {\n            if (GetHeuristic(retPos, endPos) > GetHeuristic(unvisited[i], endPos)) {\n                retPos = unvisited[i];\n                retIndex = i;\n            }\n        }\n    }\n\n    unvisited.splice(retIndex, 1);\n    return retPos;\n}\n\n// 取得轉向分數\n// 考慮轉向分數是為了只搜尋一條線，如果沒有這個分數，則搜尋會變成三條線，因為１點的前下上 距離終點 的估值可能相同，所以會走三條路\nfunction GetScore(direction, index) {\n    var score = 0;\n    switch (direction) {\n        case \"up\":\n            switch (index) {\n                case 0:\n                    score = 1;\n                    break;\n                case 1:\n                    score = 2;\n                    break;\n                case 2:\n                    score = 3;\n                    break;\n                case 3:\n                    score = 2;\n                    break;\n                default:\n                    break;\n            }\n            break;\n        case \"right\":\n            switch (index) {\n                case 0:\n                    score = 2;\n                    break;\n                case 1:\n                    score = 1;\n                    break;\n                case 2:\n                    score = 2;\n                    break;\n                case 3:\n                    score = 3;\n                    break;\n                default:\n                    break;\n            }\n            break;\n        case \"down\":\n            switch (index) {\n                case 0:\n                    score = 3;\n                    break;\n                case 1:\n                    score = 2;\n                    break;\n                case 2:\n                    score = 1;\n                    break;\n                case 3:\n                    score = 2;\n                    break;\n                default:\n                    break;\n            }\n            break;\n        case \"left\":\n            switch (index) {\n                case 0:\n                    score = 2;\n                    break;\n                case 1:\n                    score = 3;\n                    break;\n                case 2:\n                    score = 2;\n                    break;\n                case 3:\n                    score = 1;\n                    break;\n                default:\n                    break;\n            }\n            break;\n        default:\n            break;\n    }\n    return score;\n}\n\nexport default GreedyBestFirstSearch;","import { position } from '../../Core';\n\nfunction Swarm(startCallback, speed) {\n    var retSearchPath = [];\n    var retBombPath = [];\n    var retShortestPath = [];\n\n    if (position.bomb) {\n        retShortestPath = retShortestPath.concat(DoSwarm(position.start, position.bomb, retSearchPath))\n\n        // 有找到最小路徑才繼續\n        if (retShortestPath.length > 0) {\n            retShortestPath = retShortestPath.concat(DoSwarm(position.bomb, position.end, retBombPath))\n        }\n    } else {\n        retShortestPath = retShortestPath.concat(DoSwarm(position.start, position.end, retSearchPath))\n    }\n    // 執行 start 動畫\n    startCallback(retSearchPath, retShortestPath, speed, retBombPath);\n}\n\n// 回傳最短路徑，update search\nfunction DoSwarm(startPos, endPos, searchPath) {\n    // 先假設權重都是1\n    var i, j;\n    var weights = {}\n    for (i = 0; i < position.rowSize; i++) {\n        for (j = 0; j < position.colSize; j++) {\n            weights[[i, j]] = 0;\n        }\n    }\n\n    var unvisited = [];\n    var table = {};\n\n    // 設定table: 起始點為0，其他為無限大，所有的previous vertex均為null\n    // 設定目前最短路徑的queue\n    for (i = 0; i < position.rowSize; i++) {\n        for (j = 0; j < position.colSize; j++) {\n            var pos = [i, j];\n\n            // 起始點走到pos的最短距離，上一個點，direction，total距離\n            table[pos] = [Infinity, null, null, Infinity];\n        }\n    }\n    table[startPos] = [0, null, \"right\", 0]; // 設定起始點\n    unvisited.push(startPos); // 設定目前最短路徑的queue\n\n    /* 演算法開始 */\n    var isFoundEnd = false;\n    var visited = new Set();\n    searchPath.push([startPos]); // 加入搜尋範圍\n    while (unvisited.length > 0) {\n        // 1. 選出當前最小路徑的點\n        var curPos = GetClosestNode(table, unvisited, endPos);\n\n        if (curPos in position.wall) {\n            continue; // 牆壁不走\n        }\n\n        // 2. 計算相鄰且尚未走過的點\n        var up = curPos[0] - 1 >= 0 ? [curPos[0] - 1, curPos[1]] : null;\n        var right = curPos[1] + 1 < position.colSize ? [curPos[0], curPos[1] + 1] : null;\n        var down = curPos[0] + 1 < position.rowSize ? [curPos[0] + 1, curPos[1]] : null;\n        var left = curPos[1] - 1 >= 0 ? [curPos[0], curPos[1] - 1] : null;\n\n        // eslint-disable-next-line\n        [up, right, down, left].forEach((nextPos, idx) => {\n            if (!nextPos || isFoundEnd || nextPos in position.wall) return; // 若超過邊界 or 已經找到終點了 or 是牆壁\n\n            // 策略為：只考慮 目前總分+權重+轉向分數\n            // 且，走過的也要更新，只是不會加入unvisited，因此不會在上面continue\n            var total = table[curPos][0] + weights[nextPos] + GetScore(table[curPos][2], idx) + Math.pow(GetHeuristic(nextPos, endPos), 2);\n            if (total < table[nextPos][0]) {\n                table[nextPos][0] = total;\n                table[nextPos][3] = table[nextPos][0];\n                table[nextPos][1] = curPos;\n                switch (idx) {\n                    case 0:\n                        table[nextPos][2] = \"up\";\n                        break;\n                    case 1:\n                        table[nextPos][2] = \"right\";\n                        break;\n                    case 2:\n                        table[nextPos][2] = \"down\";\n                        break;\n                    case 3:\n                        table[nextPos][2] = \"left\";\n                        break;\n                    default:\n                        break;\n                }\n            }\n\n            if (!visited.has(curPos.toString())) {\n                unvisited.push(nextPos);\n            }\n\n            if (nextPos.toString() === endPos.toString()) { // 看是否找到終點了\n                isFoundEnd = true;\n            }\n        })\n        if (!visited.has(curPos.toString())) {\n            searchPath.push([curPos]); // 加入搜尋範圍\n            visited.add(curPos.toString()); // 加入已走過\n        }\n\n        if (isFoundEnd) { // 找到終點跳出\n            break;\n        }\n    }\n\n    // 若有找到終點再判斷最小路徑\n    var curShortestPath = []\n    if (isFoundEnd) {\n        curPos = endPos;\n        while (curPos) { // 因為找到start時的previous vertex為null\n            curShortestPath.unshift(curPos);\n            curPos = table[curPos][1];\n        }\n    }\n    return curShortestPath;\n}\n\n// 推測值：用距離來表示，因為是棋盤，所以改成最短距離幾格\nfunction GetHeuristic(startPos, endPos) {\n    return Math.abs(endPos[0] - startPos[0]) + Math.abs(endPos[1] - startPos[1]);\n}\n\n// 找出分數最小點，策略：考慮所有的分數 目前總分+權重+轉向分數+估值\nfunction GetClosestNode(table, unvisited, endPos) {\n    let retPos, retIndex;\n    for (var i = 0; i < unvisited.length; i++) {\n        if (!retPos || table[retPos][3] > table[unvisited[i]][3]) {\n            retPos = unvisited[i];\n            retIndex = i;\n        }\n    }\n\n    unvisited.splice(retIndex, 1);\n    return retPos;\n}\n\nfunction GetScore(direction, index) {\n    var score = 0;\n    switch (direction) {\n        case \"up\":\n            switch (index) {\n                case 0:\n                    score = 1;\n                    break;\n                case 1:\n                    score = 2;\n                    break;\n                case 2:\n                    score = 3;\n                    break;\n                case 3:\n                    score = 2;\n                    break;\n                default:\n                    break;\n            }\n            break;\n        case \"right\":\n            switch (index) {\n                case 0:\n                    score = 2;\n                    break;\n                case 1:\n                    score = 1;\n                    break;\n                case 2:\n                    score = 2;\n                    break;\n                case 3:\n                    score = 3;\n                    break;\n                default:\n                    break;\n            }\n            break;\n        case \"down\":\n            switch (index) {\n                case 0:\n                    score = 3;\n                    break;\n                case 1:\n                    score = 2;\n                    break;\n                case 2:\n                    score = 1;\n                    break;\n                case 3:\n                    score = 2;\n                    break;\n                default:\n                    break;\n            }\n            break;\n        case \"left\":\n            switch (index) {\n                case 0:\n                    score = 2;\n                    break;\n                case 1:\n                    score = 3;\n                    break;\n                case 2:\n                    score = 2;\n                    break;\n                case 3:\n                    score = 1;\n                    break;\n                default:\n                    break;\n            }\n            break;\n        default:\n            break;\n    }\n    return score;\n}\n\nexport default Swarm;","import { position } from '../../Core';\n\nfunction ConvergentSwarm(startCallback, speed) {\n    var retSearchPath = [];\n    var retBombPath = [];\n    var retShortestPath = [];\n\n    if (position.bomb) {\n        retShortestPath = retShortestPath.concat(DoConvergentSwarm(position.start, position.bomb, retSearchPath))\n\n        // 有找到最小路徑才繼續\n        if (retShortestPath.length > 0) {\n            retShortestPath = retShortestPath.concat(DoConvergentSwarm(position.bomb, position.end, retBombPath))\n        }\n    } else {\n        retShortestPath = retShortestPath.concat(DoConvergentSwarm(position.start, position.end, retSearchPath))\n    }\n    // 執行 start 動畫\n    startCallback(retSearchPath, retShortestPath, speed, retBombPath);\n}\n\n// 回傳最短路徑，update search\nfunction DoConvergentSwarm(startPos, endPos, searchPath) {\n    // 先假設權重都是1\n    var i, j;\n    var weights = {}\n    for (i = 0; i < position.rowSize; i++) {\n        for (j = 0; j < position.colSize; j++) {\n            weights[[i, j]] = 0;\n        }\n    }\n\n    var unvisited = [];\n    var table = {};\n\n    // 設定table: 起始點為0，其他為無限大，所有的previous vertex均為null\n    // 設定目前最短路徑的queue\n    for (i = 0; i < position.rowSize; i++) {\n        for (j = 0; j < position.colSize; j++) {\n            var pos = [i, j];\n\n            // 起始點走到pos的最短距離，上一個點，direction，total距離\n            table[pos] = [Infinity, null, null, Infinity];\n        }\n    }\n    table[startPos] = [0, null, \"right\", 0]; // 設定起始點\n    unvisited.push(startPos); // 設定目前最短路徑的queue\n\n    /* 演算法開始 */\n    var isFoundEnd = false;\n    var visited = new Set();\n    searchPath.push([startPos]); // 加入搜尋範圍\n    while (unvisited.length > 0) {\n        // 1. 選出當前最小路徑的點\n        var curPos = GetClosestNode(table, unvisited, endPos);\n\n        if (curPos in position.wall) {\n            continue; // 牆壁不走\n        }\n\n        // 2. 計算相鄰且尚未走過的點\n        var up = curPos[0] - 1 >= 0 ? [curPos[0] - 1, curPos[1]] : null;\n        var right = curPos[1] + 1 < position.colSize ? [curPos[0], curPos[1] + 1] : null;\n        var down = curPos[0] + 1 < position.rowSize ? [curPos[0] + 1, curPos[1]] : null;\n        var left = curPos[1] - 1 >= 0 ? [curPos[0], curPos[1] - 1] : null;\n\n        // eslint-disable-next-line\n        [up, right, down, left].forEach((nextPos, idx) => {\n            if (!nextPos || isFoundEnd || nextPos in position.wall) return; // 若超過邊界 or 已經找到終點了 or 是牆壁\n\n            // 策略為：只考慮 目前總分+權重+轉向分數\n            // 且，走過的也要更新，只是不會加入unvisited，因此不會在上面continue\n            var total = table[curPos][0] + (weights[nextPos] + GetScore(table[curPos][2], idx)) * Math.pow(GetHeuristic(nextPos, endPos), 7);\n            if (total < table[nextPos][0]) {\n                table[nextPos][0] = total;\n                table[nextPos][3] = table[nextPos][0];\n                table[nextPos][1] = curPos;\n                switch (idx) {\n                    case 0:\n                        table[nextPos][2] = \"up\";\n                        break;\n                    case 1:\n                        table[nextPos][2] = \"right\";\n                        break;\n                    case 2:\n                        table[nextPos][2] = \"down\";\n                        break;\n                    case 3:\n                        table[nextPos][2] = \"left\";\n                        break;\n                    default:\n                        break;\n                }\n            }\n\n            if (!visited.has(curPos.toString())) {\n                unvisited.push(nextPos);\n            }\n\n            if (nextPos.toString() === endPos.toString()) { // 看是否找到終點了\n                isFoundEnd = true;\n            }\n        })\n        if (!visited.has(curPos.toString())) {\n            searchPath.push([curPos]); // 加入搜尋範圍\n            visited.add(curPos.toString()); // 加入已走過\n        }\n\n        if (isFoundEnd) { // 找到終點跳出\n            break;\n        }\n    }\n\n    // 若有找到終點再判斷最小路徑\n    var curShortestPath = []\n    if (isFoundEnd) {\n        curPos = endPos;\n        while (curPos) { // 因為找到start時的previous vertex為null\n            curShortestPath.unshift(curPos);\n            curPos = table[curPos][1];\n        }\n    }\n    return curShortestPath;\n}\n\n// 推測值：用距離來表示，因為是棋盤，所以改成最短距離幾格\nfunction GetHeuristic(startPos, endPos) {\n    return Math.abs(endPos[0] - startPos[0]) + Math.abs(endPos[1] - startPos[1]);\n}\n\n// 找出分數最小點，策略：考慮所有的分數 目前總分+權重+轉向分數+估值\nfunction GetClosestNode(table, unvisited, endPos) {\n    let retPos, retIndex;\n    for (var i = 0; i < unvisited.length; i++) {\n        if (!retPos || table[retPos][3] > table[unvisited[i]][3]) {\n            retPos = unvisited[i];\n            retIndex = i;\n        }\n    }\n\n    unvisited.splice(retIndex, 1);\n    return retPos;\n}\n\nfunction GetScore(direction, index) {\n    var score = 0;\n    switch (direction) {\n        case \"up\":\n            switch (index) {\n                case 0:\n                    score = 1;\n                    break;\n                case 1:\n                    score = 2;\n                    break;\n                case 2:\n                    score = 3;\n                    break;\n                case 3:\n                    score = 2;\n                    break;\n                default:\n                    break;\n            }\n            break;\n        case \"right\":\n            switch (index) {\n                case 0:\n                    score = 2;\n                    break;\n                case 1:\n                    score = 1;\n                    break;\n                case 2:\n                    score = 2;\n                    break;\n                case 3:\n                    score = 3;\n                    break;\n                default:\n                    break;\n            }\n            break;\n        case \"down\":\n            switch (index) {\n                case 0:\n                    score = 3;\n                    break;\n                case 1:\n                    score = 2;\n                    break;\n                case 2:\n                    score = 1;\n                    break;\n                case 3:\n                    score = 2;\n                    break;\n                default:\n                    break;\n            }\n            break;\n        case \"left\":\n            switch (index) {\n                case 0:\n                    score = 2;\n                    break;\n                case 1:\n                    score = 3;\n                    break;\n                case 2:\n                    score = 2;\n                    break;\n                case 3:\n                    score = 1;\n                    break;\n                default:\n                    break;\n            }\n            break;\n        default:\n            break;\n    }\n    return score;\n}\n\nexport default ConvergentSwarm;","import { position } from '../../Core';\n\n\nfunction BidirectionSwarm(startCallback, speed) {\n    var retSearchPath = [];\n    var retBombPath = [];\n    var retShortestPath = [];\n\n    retShortestPath = retShortestPath.concat(DoBidirectionSwarm(position.start, position.end, retSearchPath))\n\n    // 執行 start 動畫\n    startCallback(retSearchPath, retShortestPath, speed, retBombPath);\n}\n\n// 回傳最短路徑，update search\nfunction DoBidirectionSwarm(startPos, endPos, searchPath) {\n    // 先假設權重都是1\n    var i, j;\n    var weights = {}\n    for (i = 0; i < position.rowSize; i++) {\n        for (j = 0; j < position.colSize; j++) {\n            weights[[i, j]] = 0;\n        }\n    }\n\n    var unvisited = [[], []]; // [0]: start, [1]: end\n    var table = [{}, {}];\n\n    // 設定table: 起始點為0，其他為無限大，所有的previous vertex均為null\n    // 設定目前最短路徑的queue\n    for (i = 0; i < position.rowSize; i++) {\n        for (j = 0; j < position.colSize; j++) {\n            var pos = [i, j];\n\n            // 起始點走到pos的最短距離，上一個點，direction，total距離\n            table[0][pos] = [Infinity, null, null, Infinity];\n            table[1][pos] = [Infinity, null, null, Infinity];\n        }\n    }\n    table[0][startPos] = [0, null, \"right\", 0]; // 設定起始點\n    table[1][endPos] = [0, null, \"left\", 0]; // 設定起始點\n    unvisited[0].push(startPos); // 設定目前最短路徑的queue\n    unvisited[1].push(endPos); // 設定目前最短路徑的queue\n\n    /* 演算法開始 */\n    var curShortestPath = []\n    var which = 1; // 0 for start, 1 for end\n    var start = [startPos, endPos];\n    var end = [endPos, startPos];\n    var actualEnd = null;\n    var isFoundEnd = false;\n    var visited = [new Set(), new Set()]; // [0]: start, [1]: end\n    searchPath.push(start); // 加入搜尋範圍\n    while (unvisited[0].length > 0 || unvisited[1].length > 0) {\n\n        if (unvisited[0].length > 0 && unvisited[1].length > 0) {\n            which = (which + 1) % 2;\n        } else if (unvisited[0].length > 0) {\n            which = 0;\n        } else if (unvisited[1].length > 0) {\n            which = 1;\n        }\n\n        // 1. 選出當前最小路徑的點\n        var curPos = GetClosestNode(table[which], unvisited[which], end[which]);\n\n        if (curPos in position.wall) {\n            which--; // 走一樣的目標\n            continue; // 牆壁不走\n        }\n\n        // 2. 計算相鄰且尚未走過的點\n        var up = curPos[0] - 1 >= 0 ? [curPos[0] - 1, curPos[1]] : null;\n        var right = curPos[1] + 1 < position.colSize ? [curPos[0], curPos[1] + 1] : null;\n        var down = curPos[0] + 1 < position.rowSize ? [curPos[0] + 1, curPos[1]] : null;\n        var left = curPos[1] - 1 >= 0 ? [curPos[0], curPos[1] - 1] : null;\n\n        // eslint-disable-next-line\n        [up, right, down, left].forEach((nextPos, idx) => {\n            if (!nextPos || nextPos in position.wall) return; // 若超過邊界 or 已經找到終點了 or 是牆壁\n\n            // 策略為：只考慮 目前總分+權重+轉向分數\n            // 且，走過的也要更新，只是不會加入unvisited，因此不會在上面continue\n            var total = table[which][curPos][0] + weights[nextPos] + GetScore(table[which][curPos][2], idx) + Math.pow(GetHeuristic(nextPos, end[which]), 2);\n            if (total <= table[which][nextPos][0]) {\n                table[which][nextPos][0] = total;\n                table[which][nextPos][3] = table[which][nextPos][0];\n                table[which][nextPos][1] = curPos;\n                switch (idx) {\n                    case 0:\n                        table[which][nextPos][2] = \"up\";\n                        break;\n                    case 1:\n                        table[which][nextPos][2] = \"right\";\n                        break;\n                    case 2:\n                        table[which][nextPos][2] = \"down\";\n                        break;\n                    case 3:\n                        table[which][nextPos][2] = \"left\";\n                        break;\n                    default:\n                        break;\n                }\n            }\n\n            if (!visited[which].has(curPos.toString())) {\n                unvisited[which].push(nextPos);\n            }\n\n            // 若找尋過程有對方搜尋到的，則更新actualEnd\n            if (visited[(which + 1) % 2].has(curPos.toString())) {\n                if (actualEnd === null) {\n                    console.log(\"1\")\n                    actualEnd = curPos;\n                    var tmp = actualEnd;\n                    while (tmp) { // 因為找到start時的previous vertex為null\n                        if (which === 0) {\n                            curShortestPath.unshift(tmp);\n                        } else {\n                            curShortestPath.push(tmp);\n                        }\n                        tmp = table[which][tmp][1];\n                    }\n                } else {\n                    isFoundEnd = true;\n                }\n                return;\n            }\n        })\n        if (!visited[which].has(curPos.toString())) {\n            searchPath.push([curPos]); // 加入搜尋範圍\n            visited[which].add(curPos.toString()); // 加入已走過\n        }\n\n        if (isFoundEnd) { // 找到終點跳出\n            break;\n        }\n    }\n\n    // 若有找到終點再判斷最小路徑\n    if (isFoundEnd) {\n        console.log(which)\n        curPos = actualEnd;\n        while (curPos) { // 因為找到start時的previous vertex為null\n            if (which === 1) {\n                curShortestPath.unshift(curPos);\n            } else {\n                curShortestPath.push(curPos);\n            }\n            curPos = table[(which + 1) % 2][curPos][1];\n        }\n    }\n    return curShortestPath;\n}\n\n// 推測值：用距離來表示，因為是棋盤，所以改成最短距離幾格\nfunction GetHeuristic(startPos, endPos) {\n    return Math.abs(endPos[0] - startPos[0]) + Math.abs(endPos[1] - startPos[1]);\n}\n\n// 找出分數最小點，策略：考慮所有的分數 目前總分+權重+轉向分數+估值\nfunction GetClosestNode(table, unvisited, endPos) {\n    let retPos, retIndex;\n    for (var i = 0; i < unvisited.length; i++) {\n        if (!retPos || table[retPos][3] > table[unvisited[i]][3]) {\n            retPos = unvisited[i];\n            retIndex = i;\n        }\n    }\n\n    unvisited.splice(retIndex, 1);\n    return retPos;\n}\n\nfunction GetScore(direction, index) {\n    var score = 0;\n    switch (direction) {\n        case \"up\":\n            switch (index) {\n                case 0:\n                    score = 1;\n                    break;\n                case 1:\n                    score = 2;\n                    break;\n                case 2:\n                    score = 3;\n                    break;\n                case 3:\n                    score = 2;\n                    break;\n                default:\n                    break;\n            }\n            break;\n        case \"right\":\n            switch (index) {\n                case 0:\n                    score = 2;\n                    break;\n                case 1:\n                    score = 1;\n                    break;\n                case 2:\n                    score = 2;\n                    break;\n                case 3:\n                    score = 3;\n                    break;\n                default:\n                    break;\n            }\n            break;\n        case \"down\":\n            switch (index) {\n                case 0:\n                    score = 3;\n                    break;\n                case 1:\n                    score = 2;\n                    break;\n                case 2:\n                    score = 1;\n                    break;\n                case 3:\n                    score = 2;\n                    break;\n                default:\n                    break;\n            }\n            break;\n        case \"left\":\n            switch (index) {\n                case 0:\n                    score = 2;\n                    break;\n                case 1:\n                    score = 3;\n                    break;\n                case 2:\n                    score = 2;\n                    break;\n                case 3:\n                    score = 1;\n                    break;\n                default:\n                    break;\n            }\n            break;\n        default:\n            break;\n    }\n    return score;\n}\n\nexport default BidirectionSwarm;","import BFS from '../../Backend/Algorithms/BFS';\nimport DFS from '../../Backend/Algorithms/DFS';\nimport Dijkstra from '../../Backend/Algorithms/Dijkstra';\nimport Astar from '../../Backend/Algorithms/Astar';\nimport GreedyBestFirstSearch from '../../Backend/Algorithms/GreedyBestFirstSearch';\nimport Swarm from '../../Backend/Algorithms/Swarm';\nimport ConvergentSwarm from '../../Backend/Algorithms/ConvergentSwarm';\nimport BidirectionSwarm from '../../Backend/Algorithms/BidirectionSwarm';\n\n\nexport function UpdateTable(Start, ClearPath, algorithm, speed) {\n    ClearPath(false)\n    switch (algorithm.get) {\n        case \"Algorithm_Dijkstra\":\n            Dijkstra(Start, speed.get[1]);\n            break;\n        case 'Algorithm_AStar':\n            Astar(Start, speed.get[1]);\n            break;\n        case \"Algorithm_Greedy_Best_First\":\n            GreedyBestFirstSearch(Start, speed.get[1]);\n            break;\n        case \"Algorithm_Swarm\":\n            Swarm(Start, speed.get[1]);\n            break;\n        case \"Algorithm_Convergent_Swarm\":\n            ConvergentSwarm(Start, speed.get[1]);\n            break;\n        case \"Algorithm_Bidrectional_Swarm\":\n            BidirectionSwarm(Start, speed.get[1]);\n            break;\n        case \"Algorithm_Breadth_First\":\n            BFS(Start, speed.get[1]);\n            break;\n        case \"Algorithm_Depth_First\":\n            DFS(Start, speed.get[1]);\n            break;\n        default:\n            break;\n    }\n}","import { useContext } from 'react'\nimport { tableVar, touchContext, updateContext, componentKind, synchronize } from './TableIndex'\nimport { SearchAnimation, SearchBombAnimation, MazeAnimation, FinalAnimation } from './Animation'\nimport { sysStatusContext, algorithmContext, bombContext, speedContext } from '../../Core'\nimport { setTable } from './SetTable'\nimport { UpdateTable } from './UpdateTable'\nimport { WhichComponentSame } from './WhichComp'\n\n\nfunction ButtonEvent() {\n    const [touch, update] = [useContext(touchContext), useContext(updateContext)]\n    const [algorithm, bomb, sysSpeed, sysStatus] = [useContext(algorithmContext), useContext(bombContext), useContext(speedContext), useContext(sysStatusContext)]\n\n    const Start = (search, path, speed, bomb = []) => {\n        if (update.get && synchronize.update) {\n            FinalAnimation(search, path, bomb)\n        }else{\n            // console.log(\"Start\")\n            sysStatus.set(\"RUNNING\")\n            update.set(\"True\")\n            synchronize.update = true\n            speed = speed / (search.length + bomb.length + path.length * 0.5)\n            SearchBombAnimation(search, bomb, path, speed, 0, SearchAnimation, () => sysStatus.set(\"IDLE\"))\n        }\n    }\n\n    const CreateMaze = (maze, speed) => {\n        sysStatus.set(\"RUNNING\")\n        if(sysSpeed.get[0] === \"Average\"){\n            speed *= 10\n        }else if(sysSpeed.get[0] === \"Slow\"){\n            speed *= 10\n        }\n        speed = speed / maze.length * 0.5\n        MazeAnimation(maze, speed, 0, () => sysStatus.set(\"IDLE\"))\n    }\n\n    const Addbomb = () => {\n        // console.log(\"AddBomb\")\n        const index = Math.floor(tableVar.rowSize / 2) * tableVar.colSize + Math.floor(tableVar.colSize / 2)\n\n        if (WhichComponentSame(index) <= 2) {\n            return\n        }\n\n        bomb.set(\"True\")\n        setTable(index, componentKind.bomb, true)\n\n        if (update.get) {\n            UpdateTable(Start, ClearPath, algorithm, sysSpeed)\n        }\n    }\n\n    const RemoveBomb = () => {\n        // console.log(\"RemoveBomb\")\n        for (var i = 0; i < tableVar.rowSize * tableVar.colSize; i++) {\n            if (WhichComponentSame(i) === 2) {\n                setTable(i, componentKind.background, true)\n                break\n            }\n        }\n        bomb.set(\"False\")\n\n        if (update.get) {\n            UpdateTable(Start, ClearPath, algorithm, sysSpeed)\n        }\n    }\n\n    const ClearWalls = () => {\n        // console.log(\"ClearWall\")\n        for (var i = 0; i < tableVar.rowSize * tableVar.colSize; i++) {\n            if (WhichComponentSame(i) === 3 || WhichComponentSame(i) === 4) {\n                setTable(i, componentKind.background, true)\n            }\n        }\n        touch.set(\"\")\n        ClearPath()\n    }\n\n    const ClearPath = (event = true) => {\n        // console.log(\"ClearPath\")\n        if (event) {\n            update.set(\"False\")\n            synchronize.update = false\n        }\n        for (var i = 0; i < tableVar.rowSize * tableVar.colSize; i++) {\n            if(WhichComponentSame(i) >= 5) {\n                setTable(i, componentKind.background)\n            }else if(WhichComponentSame(i) === 3){\n                setTable(i, componentKind.weightStatic)\n            }else if(WhichComponentSame(i) === 2){\n                setTable(i, componentKind.bombStatic)\n            }else if(WhichComponentSame(i) === 1){\n                setTable(i, componentKind.endStatic)\n            }else if(WhichComponentSame(i) === 0){\n                setTable(i, componentKind.startStatic)\n            }\n        }\n    }\n\n    const ClearBoard = () => {\n        // console.log(\"ClearBoard\")\n        update.set(\"False\")\n        for (var i = 0; i < tableVar.rowSize * tableVar.colSize; i++) {\n            setTable(i, componentKind.background, true)\n        }\n        setTable(Math.floor(tableVar.rowSize / 2) * tableVar.colSize + Math.floor(tableVar.colSize / 4), componentKind.start, true)\n        setTable(Math.floor(tableVar.rowSize / 2 + 1) * tableVar.colSize - Math.floor(tableVar.colSize / 4), componentKind.end, true)\n        touch.set(\"\")\n        bomb.set(\"False\")\n    }\n\n    return { Start, Addbomb, RemoveBomb, ClearWalls, ClearPath, ClearBoard, CreateMaze }\n}\n\nexport default ButtonEvent\n\n\n\n","import React, { useContext } from 'react';\r\nimport { NavDropdown, Nav } from 'react-bootstrap';\r\nimport { algorithmContext, sysStatusContext } from '../../Core';\r\nimport Colored from '../../HOC/Colored';\r\nimport ButtonEvent from '../TableHelper/ButtonEvent';\r\n\r\nfunction DropdownAlgorithm() {\r\n    const algoContext = useContext(algorithmContext);\r\n    const sysStatus = useContext(sysStatusContext);\r\n    const [className, toggleHandler] = Colored();\r\n    const buttonEvent = ButtonEvent()\r\n\r\n    const DropdownAlgorithmHandler = (eventKey) => {\r\n\r\n        if (sysStatus.get !== \"IDLE\") {\r\n            return;\r\n        }\r\n\r\n        switch (eventKey) {\r\n            case \"Algorithm_Dijkstra\":\r\n                algoContext.set('Algorithm_Dijkstra');\r\n                break;\r\n            case \"Algorithm_AStar\":\r\n                algoContext.set('Algorithm_AStar');\r\n                break;\r\n            case \"Algorithm_Greedy_Best_First\":\r\n                algoContext.set('Algorithm_Greedy_Best_First');\r\n                break;\r\n            case \"Algorithm_Swarm\":\r\n                algoContext.set('Algorithm_Swarm');\r\n                break;\r\n            case \"Algorithm_Convergent_Swarm\":\r\n                algoContext.set('Algorithm_Convergent_Swarm');\r\n                break;\r\n            case \"Algorithm_Bidrectional_Swarm\":\r\n                buttonEvent.RemoveBomb(); // 按下去後要清空bomb\r\n                algoContext.set('Algorithm_Bidrectional_Swarm');\r\n                break;\r\n            case \"Algorithm_Breadth_First\":\r\n                algoContext.set('Algorithm_Breadth_First');\r\n                break;\r\n            case \"Algorithm_Depth_First\":\r\n                algoContext.set('Algorithm_Depth_First');\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Nav.Item>\r\n            <NavDropdown xs={1} title={<span className={className}>Algorithms</span>} id=\"DropdownAlgorithm\" onSelect={(eventKey) => DropdownAlgorithmHandler(eventKey)}\r\n                onMouseEnter={toggleHandler} onMouseLeave={toggleHandler}\r\n            >\r\n                <NavDropdown.Item eventKey=\"Algorithm_Dijkstra\">Dijkstra's Algorithm</NavDropdown.Item>\r\n                <NavDropdown.Item eventKey=\"Algorithm_AStar\">A* Search</NavDropdown.Item>\r\n                <NavDropdown.Item eventKey=\"Algorithm_Greedy_Best_First\">Greedy Best-First Search</NavDropdown.Item>\r\n                <NavDropdown.Item eventKey=\"Algorithm_Swarm\">Swarm Algorithm</NavDropdown.Item>\r\n                <NavDropdown.Item eventKey=\"Algorithm_Convergent_Swarm\">Convergent Swarm Algorithm</NavDropdown.Item>\r\n                <NavDropdown.Item eventKey=\"Algorithm_Bidrectional_Swarm\">Bidirectional Swarm Algorithm</NavDropdown.Item>\r\n                <NavDropdown.Item eventKey=\"Algorithm_Breadth_First\">Breadth-First Search</NavDropdown.Item>\r\n                <NavDropdown.Item eventKey=\"Algorithm_Depth_First\">Depth-First Search</NavDropdown.Item>\r\n            </NavDropdown>\r\n        </Nav.Item>\r\n    )\r\n}\r\n\r\nexport default DropdownAlgorithm;","import { position } from '../../Core';\n\nfunction Simple_Stair_Pattern() {\n    var walls = [];\n    var towardUp = true;\n    var x = position.rowSize;\n\n    for (var y = 0; y < position.colSize; y++) {\n        if (towardUp) {\n            x--;\n            if (x < 0) {\n                towardUp = false;\n                x = 1;\n            }\n        } else {\n            x++;\n            if (x >= position.rowSize) {\n                towardUp = true;\n                x = position.rowSize - 2;\n            }\n        }\n        walls.push([x, y]);\n    }\n    return walls;\n}\n\nexport default Simple_Stair_Pattern;","import { position } from '../../Core';\n\n// 取得四周圍\nexport const CreateAround = (wallSet = new Set()) => {\n    var walls = [];\n    var x = 0;\n    var y = 0;\n\n    // 取得外圍\n    var tmp = position.colSize - 1;\n    for (y = 0; y <= tmp; y++) {\n        walls.push([0, y]);\n        walls.push([0, tmp]);\n        wallSet.add([0, y].toString());\n        wallSet.add([0, tmp].toString());\n        tmp--;\n    }\n\n    for (x = 0; x < position.rowSize; x++) {\n        walls.push([x, 0]);\n        walls.push([x, position.colSize - 1]);\n        wallSet.add([x, 0].toString());\n        wallSet.add([x, position.colSize - 1].toString());\n\n    }\n\n    tmp = position.colSize - 1;\n    for (y = 0; y <= tmp; y++) {\n        walls.push([position.rowSize - 1, y]);\n        walls.push([position.rowSize - 1, tmp]);\n        wallSet.add([position.rowSize - 1, y].toString());\n        wallSet.add([position.rowSize - 1, tmp].toString());\n        tmp--;\n    }\n    return walls;\n}","import { position } from '../../Core';\nimport { CreateAround } from './Core';\n\nfunction Binary_Tree() {\n    var wallSet = new Set();\n    var walls = CreateAround(wallSet);\n    var x = 0;\n    var y = 0;\n\n    // Binary Tree to get random maze\n    // http://weblog.jamisbuck.org/2011/2/1/maze-generation-binary-tree-algorithm\n    for (x = 2; x <= position.rowSize - 2; x += 2) {\n        for (y = 2; y <= position.colSize - 2; y += 2) {\n            if (wallSet.has([x - 2, y].toString()) && wallSet.has([x, y - 2].toString())) {\n                var randomFace = Math.floor(Math.random() * 2) + 1;// 1=上，2=左\n                switch (randomFace) {\n                    case 1:\n                        walls.push([x - 1, y]);\n                        wallSet.add([x - 1, y].toString());\n                        break;\n                    case 2:\n                        walls.push([x, y - 1]);\n                        wallSet.add([x, y - 1].toString());\n                        break;\n                    default:\n                        break;\n                }\n            } else if (wallSet.has([x - 2, y].toString())) {\n                walls.push([x - 1, y]);\n                wallSet.add([x - 1, y].toString());\n            } else if (wallSet.has([x, y - 2].toString())) {\n                walls.push([x, y - 2]);\n                wallSet.add([x, y - 1].toString());\n            } else {\n                console.log('Some Error in Binary_Tree_Maze()');\n            }\n            walls.push([x, y]);\n            wallSet.add([x, y].toString());\n        }\n    }\n\n    return walls;\n}\n\nexport default Binary_Tree;","import { position } from '../../Core';\nimport { CreateAround } from './Core';\n\nconst direction = {\n    horizontal: 0,\n    vertical: 1\n}\n\nfunction RecursiveDivision() {\n    var walls = CreateAround();\n    DoRecursiveDivision(0, 0, position.colSize, position.rowSize, walls);\n    return walls;\n}\n\n// walls 為 pass-by-reference，動態加入生成牆壁\n// x, y, width, height均會包含 牆壁，要生成的範圍會在這個牆壁內\n// 為了保證道路暢通 且 周圍要都是牆壁，因此已經設計成棋盤長寬均為奇數，width, height也必為為奇數\n// 所以x, y必為偶數也就是牆壁必為偶數，則道路必為奇數\n// 因此 就能保證沒有死路，因為選擇牆壁的話（偶數），絕對不會擋到路（奇數）\nfunction DoRecursiveDivision(x, y, width, height, walls) {\n    // 而且為了保證道路暢通，兩個牆壁+一個空白才會形成一個道路\n    // 因此長跟寬必須至少大於3\n    if (width < 4 || height < 4) {\n        return;\n    }\n\n    // 選擇切割方向：挑選短的那邊，一樣就random\n    var curDirection = null;\n    if (width < height) curDirection = direction.horizontal;\n    else if (width > height) curDirection = direction.vertical;\n    else curDirection = Math.round(Math.random());\n\n    var door;\n    if (curDirection === direction.horizontal) {\n        // 假設現在height=11，表示x=x0跟x=10的那整條都是牆壁\n        // 則 x建立牆壁的範圍為 2~8 (牆壁跟牆壁中間要留一條路)\n\n        // 因此x要x0+2，而剩下的random範圍為0~6且只能為偶數\n        var randomX = x + 2 + Random_0_to_n(height - 4);\n\n        // 假設width = 9，表示y=y0跟y=8的那整條都是牆壁\n        // 開路的範圍為 y0+ 1~7（但開路必為奇數），而剩下的random範圍為0~6且只能為偶數\n        door = y + 1 + Random_0_to_n(width - 3);\n\n        // 建立牆壁，範圍從 y0~y0+width\n        for (var _y = y; _y < y + width; _y++) {\n            if (_y !== door) {\n                walls.push([randomX, _y]);\n            }\n        }\n\n        // 跑 x,y,width 且 height變成了剛剛選的高-x0（跑上面）\n        DoRecursiveDivision(x, y, width, randomX - x, walls);\n\n        // 跑 新x, y, width 且 height變成了 目前總高 - 剛剛選的高度(跑下面)\n        DoRecursiveDivision(randomX, y, width, height - (randomX - x), walls);\n    } else {\n        // 垂直雷同\n        var randomY = y + 2 + Random_0_to_n(width - 4);\n        door = x + 1 + Random_0_to_n(height - 3);\n\n        for (var _x = x; _x < x + height; _x++) {\n            if (_x !== door) {\n                walls.push([_x, randomY]);\n            }\n        }\n\n        DoRecursiveDivision(x, y, randomY - y, height, walls);\n        DoRecursiveDivision(x, randomY, width - (randomY - y), height, walls);\n    }\n}\n\n// 只回傳偶數\nfunction Random_0_to_n(n) {\n    return Math.floor(Math.random() * n / 2) * 2;\n}\n\nexport default RecursiveDivision;","import { position } from '../../Core';\nimport { CreateAround } from './Core';\n\nconst direction = {\n    horizontal: 0,\n    vertical: 1\n}\n\nfunction RecursiveDivision_Horizontal() {\n    var walls = CreateAround();\n\n    // true代表水平，false代表垂直\n    // 改用最後一個參數選定要跑哪個方向\n    DoRecursiveDivision(0, 0, position.colSize, position.rowSize, walls, true);\n    return walls;\n}\n\n// 與正常版的差別在於，選擇切水平或是垂直的條件不同\n// 水平偏移（horizontal skew）：表示優先跑左邊，所以第一個遞迴規定跑水平，第二個規定跑垂直\nfunction DoRecursiveDivision(x, y, width, height, walls, boolDirection) {\n    // 而且為了保證道路暢通，兩個牆壁+一個空白才會形成一個道路\n    // 因此長跟寬必須至少大於3\n    if (width < 4 || height < 4) {\n        return;\n    }\n\n    // 選擇切割方向：挑選短的那邊，一樣就random\n    var curDirection = null;\n    if (boolDirection) curDirection = direction.horizontal;\n    else curDirection = direction.vertical;\n\n    var door;\n    if (curDirection === direction.horizontal) {\n        // 假設現在height=11，表示x=x0跟x=10的那整條都是牆壁\n        // 則 x建立牆壁的範圍為 2~8 (牆壁跟牆壁中間要留一條路)\n\n        // 因此x要x0+2，而剩下的random範圍為0~6且只能為偶數\n        var randomX = x + 2 + Random_0_to_n(height - 4);\n\n        // 假設width = 9，表示y=y0跟y=8的那整條都是牆壁\n        // 開路的範圍為 y0+ 1~7（但開路必為奇數），而剩下的random範圍為0~6且只能為偶數\n        door = y + 1 + Random_0_to_n(width - 3);\n\n        // 建立牆壁，範圍從 y0~y0+width\n        for (var _y = y; _y < y + width; _y++) {\n            if (_y !== door) {\n                walls.push([randomX, _y]);\n            }\n        }\n\n        // 跑 x,y,width 且 height變成了剛剛選的高-x0（跑上面）\n        DoRecursiveDivision(x, y, width, randomX - x, walls, true); // 第一個規定跑水平\n\n        // 跑 新x, y, width 且 height變成了 目前總高 - 剛剛選的高度(跑下面)\n        DoRecursiveDivision(randomX, y, width, height - (randomX - x), walls, false); // 第二個規定跑垂直\n    } else {\n        // 垂直雷同\n        var randomY = y + 2 + Random_0_to_n(width - 4);\n        door = x + 1 + Random_0_to_n(height - 3);\n\n        for (var _x = x; _x < x + height; _x++) {\n            if (_x !== door) {\n                walls.push([_x, randomY]);\n            }\n        }\n\n        DoRecursiveDivision(x, y, randomY - y, height, walls, true); // 第一個規定跑水平\n        DoRecursiveDivision(x, randomY, width - (randomY - y), height, walls, false); // 第二個規定跑垂直\n    }\n}\n\n// 只回傳偶數\nfunction Random_0_to_n(n) {\n    return Math.floor(Math.random() * n / 2) * 2;\n}\n\nexport default RecursiveDivision_Horizontal;","import { position } from '../../Core';\nimport { CreateAround } from './Core';\n\nconst direction = {\n    horizontal: 0,\n    vertical: 1\n}\n\nfunction RecursiveDivision_Vertical() {\n    var walls = CreateAround();\n\n    // true代表水平，false代表垂直\n    // 改用最後一個參數選定要跑哪個方向\n    DoRecursiveDivision(0, 0, position.colSize, position.rowSize, walls, false);\n    return walls;\n}\n\n// 與正常版的差別在於，選擇切水平或是垂直的條件不同\n// 垂直偏移（vertical skew）：表示優先跑左邊，所以第一個遞迴規定跑垂直，第二個規定跑水平\n// boolDirection=true代表水平，false代表垂直\nfunction DoRecursiveDivision(x, y, width, height, walls, boolDirection) {\n    // 而且為了保證道路暢通，兩個牆壁+一個空白才會形成一個道路\n    // 因此長跟寬必須至少大於3\n    if (width < 4 || height < 4) {\n        return;\n    }\n\n    // 選擇切割方向：挑選短的那邊，一樣就random\n    var curDirection = null;\n    if (boolDirection) curDirection = direction.horizontal;\n    else curDirection = direction.vertical;\n\n    var door;\n    if (curDirection === direction.horizontal) {\n        // 假設現在height=11，表示x=x0跟x=10的那整條都是牆壁\n        // 則 x建立牆壁的範圍為 2~8 (牆壁跟牆壁中間要留一條路)\n\n        // 因此x要x0+2，而剩下的random範圍為0~6且只能為偶數\n        var randomX = x + 2 + Random_0_to_n(height - 4);\n\n        // 假設width = 9，表示y=y0跟y=8的那整條都是牆壁\n        // 開路的範圍為 y0+ 1~7（但開路必為奇數），而剩下的random範圍為0~6且只能為偶數\n        door = y + 1 + Random_0_to_n(width - 3);\n\n        // 建立牆壁，範圍從 y0~y0+width\n        for (var _y = y; _y < y + width; _y++) {\n            if (_y !== door) {\n                walls.push([randomX, _y]);\n            }\n        }\n\n        // 跑 x,y,width 且 height變成了剛剛選的高-x0（跑上面）\n        DoRecursiveDivision(x, y, width, randomX - x, walls, false);  // 第一個規定跑垂直\n\n        // 跑 新x, y, width 且 height變成了 目前總高 - 剛剛選的高度(跑下面)\n        DoRecursiveDivision(randomX, y, width, height - (randomX - x), walls, true); // 第二個規定跑水平\n    } else {\n        // 垂直雷同\n        var randomY = y + 2 + Random_0_to_n(width - 4);\n        door = x + 1 + Random_0_to_n(height - 3);\n\n        for (var _x = x; _x < x + height; _x++) {\n            if (_x !== door) {\n                walls.push([_x, randomY]);\n            }\n        }\n\n        DoRecursiveDivision(x, y, randomY - y, height, walls, false); // 第一個規定跑垂直\n        DoRecursiveDivision(x, randomY, width - (randomY - y), height, walls, true); // 第二個規定跑水平\n    }\n}\n\n// 只回傳偶數\nfunction Random_0_to_n(n) {\n    return Math.floor(Math.random() * n / 2) * 2;\n}\n\nexport default RecursiveDivision_Vertical;","import { position } from '../../Core';\n\n// Kruskal 雖然是要找最小權重，但是maze的權重都是相同的\n// 因此此演算法就變成，隨機找一個，跟周圍相連，且不要形成cycle\n// 這種特性就可以用來建立隨機迷宮的牆壁\n// 但不會保證活路\nfunction Kruskal() {\n    var wallSet = new Set();\n    var walls = [];\n\n    // 建立parent與rank陣列 來判斷是否有cycle及union\n    var parent = {};\n    var rank = {};\n    for (let i = 0; i < position.rowSize; i++) {\n        for (let j = 0; j < position.colSize; j++) {\n            parent[[i, j]] = [i, j];// 每個人的root一開始都是自己\n            rank[[i, j]] = 0;// 每個人的rank一開始都是0\n        }\n    }\n\n    // 長度為三，因為只能在偶數位置建立牆壁，所以長度三才能與其他牆壁相連\n    // 用佔比率來終止迴圈，0.51是經驗法則\n    while (wallSet.size / (position.rowSize * position.colSize) < 0.51) {\n\n        // 取 產生偶數位置起點\n        let x = [RandomEven(position.rowSize), RandomEven(position.colSize)];\n        let x1 = null;\n        let x2 = null;\n        let xHead = null;\n        let yHead = null;\n        let face = Random(4);\n        switch (face) {\n            case 0: // 走上\n                if (x[0] - 2 < 0) continue;\n                x1 = [x[0] - 1, x[1]];\n                x2 = [x[0] - 2, x[1]];\n                xHead = FindRoot(parent, x);\n                yHead = FindRoot(parent, x2);\n                break;\n            case 1: // 走右\n                if (x[1] + 2 >= position.colSize) continue;\n                x1 = [x[0], x[1] + 1];\n                x2 = [x[0], x[1] + 2];\n                xHead = FindRoot(parent, x);\n                yHead = FindRoot(parent, x2);\n                break;\n            case 2:\n                if (x[0] + 2 >= position.rowSize) continue;\n                x1 = [x[0] + 1, x[1]];\n                x2 = [x[0] + 2, x[1]];\n                xHead = FindRoot(parent, x);\n                yHead = FindRoot(parent, x2);\n                break;\n            case 3:\n                if (x[1] - 2 < 0) continue;\n                x1 = [x[0], x[1] - 1];\n                x2 = [x[0], x[1] - 2];\n                xHead = FindRoot(parent, x);\n                yHead = FindRoot(parent, x2);\n                break;\n            default:\n                return [];\n        }\n\n\n        if (xHead !== yHead) {\n            walls.push(x);\n            walls.push(x1);\n            walls.push(x2);\n            wallSet.add(x.toString());\n            wallSet.add(x1.toString());\n            wallSet.add(x2.toString());\n            Union(parent, rank, x, x2);\n        }\n    }\n\n    return walls;\n}\n\n/* Disjoint Set */\n// parentArray => index的爸爸在parentArray[index] = parentIndex\n// index => 目前是誰\nfunction FindRoot(parentArray, index) {\n    if (parentArray[index] !== index) {\n        // 記得邊找邊更新\n        parentArray[index] = FindRoot(parentArray, parentArray[index]);\n    }\n    return parentArray[index];\n}\n\n\n// parentArray => index的爸爸在parentArray[index] = parentIndex\n// rankArray => 每個點的階層是多少，數字大表示越接近root\n// index1, index3 => 哪兩個點要union\nfunction Union(parentArray, rankArray, index1, index3) {\n    // 要用頭去union\n    index1 = FindRoot(parentArray, index1);\n    index3 = FindRoot(parentArray, index3);\n\n    if (index1 === index3) {\n        return;\n    }\n\n    // 如果rank3 > rank1 => index1的爸爸是index3\n    if (rankArray[index1] < rankArray[index3]) {\n        parentArray[index1] = index3;\n\n        // 如果rank3 < rank1 => index3的爸爸是index1\n    } else if (rankArray[index1] > rankArray[index3]) {\n        parentArray[index3] = index1;\n\n        // 如果rank3 === rank1 => 選一個來組合，並讓爸爸的RANK+1\n    } else {\n        parentArray[index3] = index1;\n        rankArray[index1] += 1;\n    }\n}\n\nfunction Random(n) {\n    return Math.floor(Math.random() * n);\n}\n\nfunction RandomEven(n) {\n    return Math.floor(Math.random() * n / 2) * 2;\n}\n\nexport default Kruskal;","import React, { useContext } from 'react'\r\nimport { NavDropdown, Nav } from 'react-bootstrap';\r\nimport { sysStatusContext, speedContext } from '../../Core';\r\nimport Colored from '../../HOC/Colored';\r\nimport ButtonEvent from '../TableHelper/ButtonEvent';\r\nimport Simple_Stair_Pattern from '../../Backend/Maze/Simple_Stair_Pattern';\r\nimport Binary_Tree from '../../Backend/Maze/Binary_Tree';\r\nimport RecursiveDivision from '../../Backend/Maze/RecursiveDivision';\r\nimport RecursiveDivision_Horizontal from '../../Backend/Maze/RecursiveDivision_Horizontal';\r\nimport RecursiveDivision_Vertical from '../../Backend/Maze/RecursiveDivision_Vertical';\r\nimport Kruskal from '../../Backend/Maze/Kruskal';\r\n\r\nfunction DropdownMaze() {\r\n    const sysStatus = useContext(sysStatusContext);\r\n    const speedStatus = useContext(speedContext);\r\n    const [className, toggleHandler] = Colored();\r\n    const buttonEvent = ButtonEvent();\r\n    const speed = speedStatus.get[1];\r\n\r\n    const DropdownMazeHandler = (eventKey) => {\r\n        if (sysStatus.get !== \"IDLE\") {\r\n            return;\r\n        }\r\n        buttonEvent.ClearPath()\r\n        buttonEvent.ClearWalls()\r\n        switch (eventKey) {\r\n            case \"Maze_Recursive_Division\":\r\n                buttonEvent.CreateMaze(RecursiveDivision(), speed);\r\n                break;\r\n            case \"Maze_Recursive_Division_vertical\":\r\n                buttonEvent.CreateMaze(RecursiveDivision_Vertical(), speed);\r\n                break;\r\n            case \"Maze_Recursive_Division_horizontal\":\r\n                buttonEvent.CreateMaze(RecursiveDivision_Horizontal(), speed);\r\n                break;\r\n            case \"Maze_Basic_Random\":\r\n                break;\r\n            case \"Maze_Basic_Weight_Maze\":\r\n                alert(\"Maze_Basic_Weight_Maze\");\r\n                break;\r\n            case \"Maze_Simple_stair_pattern\":\r\n                buttonEvent.CreateMaze(Simple_Stair_Pattern(), speed);\r\n                break;\r\n            case \"Maze_Binary_Tree\":\r\n                buttonEvent.CreateMaze(Binary_Tree(), speed);\r\n                break;\r\n            case \"Maze_Kruskal\":\r\n                buttonEvent.CreateMaze(Kruskal(), speed);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Nav.Item>\r\n            <NavDropdown xs={1} title={<span className={className}>Mazes & Patterns</span>} id=\"DropdownMaze\" onSelect={DropdownMazeHandler}\r\n                onMouseEnter={toggleHandler} onMouseLeave={toggleHandler}\r\n            >\r\n                <NavDropdown.Item eventKey=\"Maze_Recursive_Division\">Recursive Division</NavDropdown.Item>\r\n                <NavDropdown.Item eventKey=\"Maze_Recursive_Division_vertical\">Recursive Division(vertical skew)</NavDropdown.Item>\r\n                <NavDropdown.Item eventKey=\"Maze_Recursive_Division_horizontal\">Recursive Division(horizontal skew)</NavDropdown.Item>\r\n                <NavDropdown.Item eventKey=\"Maze_Basic_Random\">Basic Random Maze</NavDropdown.Item>\r\n                <NavDropdown.Item eventKey=\"Maze_Basic_Weight_Maze\">Basic Weight Maze</NavDropdown.Item>\r\n                <NavDropdown.Item eventKey=\"Maze_Simple_stair_pattern\">Simple Stair Pattern</NavDropdown.Item>\r\n                <NavDropdown.Item eventKey=\"Maze_Binary_Tree\">Binary Tree Generator</NavDropdown.Item>\r\n                <NavDropdown.Item eventKey=\"Maze_Kruskal\">Kruskal's Maze</NavDropdown.Item>\r\n            </NavDropdown>\r\n        </Nav.Item>\r\n    )\r\n}\r\n\r\nexport default DropdownMaze;","import React, { useState, useContext } from 'react';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport { sysStatusContext } from '../../Core';\r\nimport Colored from '../../HOC/Colored';\r\n\r\nfunction NavLink({ names, handlers }) {\r\n    const [whichHandler, setWhichHandler] = useState(0);\r\n    const sysStatus = useContext(sysStatusContext);\r\n    const [className, toggleHandler] = Colored();\r\n\r\n    const localHandler = () => {\r\n        if (sysStatus.get !== \"IDLE\") {\r\n            return;\r\n        }\r\n\r\n        setWhichHandler(preWhichHandler => (preWhichHandler + 1) % handlers.length);\r\n        handlers[whichHandler]();\r\n    }\r\n\r\n    return (\r\n        <Nav.Item xs={1}>\r\n            <Nav.Link onClick={localHandler} className={className} onMouseEnter={toggleHandler} onMouseLeave={toggleHandler}>{names[whichHandler]}</Nav.Link>\r\n        </Nav.Item>\r\n    )\r\n}\r\n\r\nexport default NavLink\r\n","import { useState, useContext } from 'react';\nimport { sysStatusContext, algorithmContext } from '../Core';\nimport '../App.scss';\n\nconst Colored = () => {\n    const sysStatus = useContext(sysStatusContext);\n    const algoStatus = useContext(algorithmContext);\n    const [isHover, setIsHover] = useState(false);\n    const [className, setClassName] = useState(\"nav-link-default\");\n\n    const toggleHandler = () => {\n        if (isHover) {\n            setClassName(\"nav-link-default\");\n            setIsHover(false);\n        } else {\n            if (sysStatus.get !== \"IDLE\" || algoStatus.get === \"\" || algoStatus.get === \"Algorithm_Bidrectional_Swarm\") {\n                setClassName(\"nav-link-red\");\n            } else {\n                setClassName(\"nav-link-green\");\n            }\n            setIsHover(true);\n        }\n    }\n\n    return [className, toggleHandler];\n}\n\nexport default Colored\n","import React, { useState, useContext, useEffect } from 'react';\nimport Nav from 'react-bootstrap/Nav';\nimport { bombContext, sysStatusContext, algorithmContext } from '../../Core';\nimport Colored from '../../HOC/Colored_AddButton';\nimport { IsMount } from '../../Core/IsMount.js'\n\nfunction NavAddBomb({ names, handlers }) {\n    const [whichHandler, setWhichHandler] = useState(0);\n    const bomb = useContext(bombContext);\n    const sysStatus = useContext(sysStatusContext);\n    const algoContext = useContext(algorithmContext);\n    const [className, toggleHandler] = Colored();\n    const isMount = IsMount();\n\n    useEffect(() => {\n        if (isMount) return; // 防止第一次render也會跑進來執行\n\n        if (bomb.get === true) {\n            setWhichHandler(1);\n        } else {\n            setWhichHandler(0);\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [bomb])\n\n    useEffect(() => {\n        if (isMount) return;\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [whichHandler])\n\n    const localHandler = () => {\n        if (isMount) return;\n\n        if (sysStatus.get !== \"IDLE\" || algoContext.get === \"\" || algoContext.get === \"Algorithm_Bidrectional_Swarm\") {\n            return;\n        }\n\n        handlers[whichHandler]();\n    }\n\n\n    return (\n        <Nav.Item xs={1}>\n            <Nav.Link onClick={localHandler} className={className} onMouseEnter={toggleHandler} onMouseLeave={toggleHandler}>{names[whichHandler]}</Nav.Link>\n        </Nav.Item>\n    )\n}\n\nexport default NavAddBomb\n","import { useRef, useEffect } from 'react';\n\nexport const IsMount = () => {\n    const isMount = useRef(true);\n\n    useEffect(() => {\n        isMount.current = false;\n    }, [])\n\n    return isMount.current;\n}\n\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { algorithmContext, sysStatusContext, speedContext } from '../../Core';\r\nimport ButtonEvent from '../TableHelper/ButtonEvent';\r\nimport BFS from '../../Backend/Algorithms/BFS';\r\nimport DFS from '../../Backend/Algorithms/DFS';\r\nimport Dijkstra from '../../Backend/Algorithms/Dijkstra';\r\nimport Astar from '../../Backend/Algorithms/Astar';\r\nimport GreedyBestFirstSearch from '../../Backend/Algorithms/GreedyBestFirstSearch';\r\nimport Swarm from '../../Backend/Algorithms/Swarm';\r\nimport ConvergentSwarm from '../../Backend/Algorithms/ConvergentSwarm';\r\nimport BidirectionSwarm from '../../Backend/Algorithms/BidirectionSwarm';\r\n\r\nconst NavButton = () => {\r\n\r\n    const [buttonName, setButtonName] = useState(\"Visualize !\");\r\n    const [myVariant, setMyVariant] = useState(\"\");\r\n    const algoContext = useContext(algorithmContext);\r\n    const sysStatus = useContext(sysStatusContext);\r\n    const speed = useContext(speedContext);\r\n    const buttonEvent = ButtonEvent();\r\n\r\n    useEffect(() => {\r\n        setMyVariant('success');\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        var algoName = \"\";\r\n        switch (algoContext.get) {\r\n            case \"Algorithm_Dijkstra\":\r\n                algoName = \"Dijkstra's\";\r\n                break;\r\n            case 'Algorithm_AStar':\r\n                algoName = \"A*\";\r\n                break;\r\n            case \"Algorithm_Greedy_Best_First\":\r\n                algoName = \"Greedy\";\r\n                break;\r\n            case \"Algorithm_Swarm\":\r\n                algoName = \"Swarm\";\r\n                break;\r\n            case \"Algorithm_Convergent_Swarm\":\r\n                algoName = \"Convergent Swarm\";\r\n                break;\r\n            case \"Algorithm_Bidrectional_Swarm\":\r\n                algoName = \"Bidrectional Swarm\";\r\n                break;\r\n            case \"Algorithm_Breadth_First\":\r\n                algoName = \"BFS\";\r\n                break;\r\n            case \"Algorithm_Depth_First\":\r\n                algoName = \"DFS\";\r\n                break;\r\n            default:\r\n                algoName = \"\";\r\n                break;\r\n        }\r\n        setButtonName(`Visualize ${algoName}!`);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [algoContext.get])\r\n\r\n    useEffect(() => {\r\n        if (sysStatus.get === 'RUNNING') {\r\n            setMyVariant('danger');\r\n        } else {\r\n            setMyVariant('success');\r\n        }\r\n    }, [sysStatus.get])\r\n\r\n\r\n    const handler = () => {\r\n        if (sysStatus.get !== \"IDLE\") {\r\n            return;\r\n        }\r\n\r\n        if (algoContext.get === \"\") {\r\n            setButtonName(\"Pick an Algorithm\");\r\n        } else {\r\n            buttonEvent.ClearPath();\r\n            switch (algoContext.get) {\r\n                case \"Algorithm_Dijkstra\":\r\n                    Dijkstra(buttonEvent.Start, speed.get[1]);\r\n                    break;\r\n                case 'Algorithm_AStar':\r\n                    Astar(buttonEvent.Start, speed.get[1]);\r\n                    break;\r\n                case \"Algorithm_Greedy_Best_First\":\r\n                    GreedyBestFirstSearch(buttonEvent.Start, speed.get[1]);\r\n                    break;\r\n                case \"Algorithm_Swarm\":\r\n                    Swarm(buttonEvent.Start, speed.get[1]);\r\n                    break;\r\n                case \"Algorithm_Convergent_Swarm\":\r\n                    ConvergentSwarm(buttonEvent.Start, speed.get[1]);\r\n                    break;\r\n                case \"Algorithm_Bidrectional_Swarm\":\r\n                    BidirectionSwarm(buttonEvent.Start, speed.get[1]);\r\n                    break;\r\n                case \"Algorithm_Breadth_First\":\r\n                    BFS(buttonEvent.Start, speed.get[1]);\r\n                    break;\r\n                case \"Algorithm_Depth_First\":\r\n                    DFS(buttonEvent.Start, speed.get[1]);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Nav.Item xs={1}>\r\n            <Button id=\"navButton\" variant={myVariant} size=\"lg\" onClick={handler}>{buttonName}</Button>\r\n        </Nav.Item>\r\n    )\r\n};\r\n\r\nexport default NavButton\r\n","import React, { useState, useContext } from 'react';\nimport Nav from 'react-bootstrap/Nav';\nimport { sysStatusContext } from '../../Core';\nimport Colored from '../../HOC/Colored';\n\nfunction NavClearBoard({ names, handlers }) {\n    const [whichHandler, setWhichHandler] = useState(0);\n    const sysStatus = useContext(sysStatusContext);\n    const [className, toggleHandler] = Colored();\n\n    const localHandler = () => {\n        if (sysStatus.get !== \"IDLE\") {\n            return;\n        }\n\n        setWhichHandler(preWhichHandler => (preWhichHandler + 1) % handlers.length);\n        handlers[whichHandler]();\n    }\n\n    return (\n        <Nav.Item xs={1}>\n            <Nav.Link onClick={localHandler} className={className} onMouseEnter={toggleHandler} onMouseLeave={toggleHandler}>{names[whichHandler]}</Nav.Link>\n        </Nav.Item>\n    )\n}\n\nexport default NavClearBoard\n","import React, { useState, useContext, useEffect } from 'react';\r\nimport NavDropdown from 'react-bootstrap/NavDropdown';\r\nimport { sysStatusContext } from '../../Core';\r\nimport { speedContext } from '../../Core';\r\nimport Colored from '../../HOC/Colored';\r\n\r\nfunction DropdownSpeed() {\r\n    const [title, setTitle] = useState('Average');\r\n    const sysStatus = useContext(sysStatusContext);\r\n    const speed = useContext(speedContext);\r\n    const [className, toggleHandler] = Colored();\r\n\r\n    useEffect(() => {\r\n        setTitle(speed.get[0]);\r\n    }, [speed.get])\r\n\r\n\r\n    const DropdownSpeedHandler = (eventKey) => {\r\n        if (sysStatus.get !== \"IDLE\") {\r\n            return;\r\n        }\r\n\r\n        switch (eventKey) {\r\n            case \"Fast\":\r\n                speed.set(\"Fast\");\r\n                break;\r\n            case \"Average\":\r\n                speed.set(\"Average\");\r\n                break;\r\n            case \"Slow\":\r\n                speed.set(\"Slow\");\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <NavDropdown xs={1} title={<span className={className}>Speed: {title}</span>} id=\"DropdownSpeed\" onSelect={DropdownSpeedHandler}\r\n            onMouseEnter={toggleHandler} onMouseLeave={toggleHandler}\r\n        >\r\n            <NavDropdown.Item eventKey=\"Fast\">Fast</NavDropdown.Item>\r\n            <NavDropdown.Item eventKey=\"Average\">Average</NavDropdown.Item>\r\n            <NavDropdown.Item eventKey=\"Slow\">Slow</NavDropdown.Item>\r\n        </NavDropdown>\r\n    )\r\n}\r\n\r\nexport default DropdownSpeed;","import React from 'react';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Logo from './HeaderHelper/Logo';\r\nimport DropdownAlgorithm from './HeaderHelper/DropdownAlgorithm';\r\nimport DropdownMaze from './HeaderHelper/DropdownMaze';\r\nimport NavLink from './HeaderHelper/NavLink';\r\nimport NavAddBomb from './HeaderHelper/NavAddBomb';\r\nimport NavButton from './HeaderHelper/NavButton';\r\nimport NavClearBoard from './HeaderHelper/NavClearBoard';\r\nimport DropdownSpeed from './HeaderHelper/DropdownSpeed';\r\nimport ButtonEvent from './TableHelper/ButtonEvent';\r\n\r\nfunction Header() {\r\n    const buttonEvent = ButtonEvent()\r\n\r\n    return (\r\n        <Navbar collapseOnSelect expand=\"xl\" bg='dark' variant='dark'>\r\n            <Logo />\r\n            <Navbar.Toggle aria-controls=\"Collapse\" />\r\n            <Navbar.Collapse id=\"Collapse\" className='nvbar-collapse'>\r\n                <Nav className=\"nav-bar\">\r\n                    <DropdownAlgorithm />\r\n                    <DropdownMaze />\r\n                    <NavAddBomb names={[\"Add Bomb\", \"Remove Bomb\"]} handlers={[buttonEvent.Addbomb, buttonEvent.RemoveBomb]} />\r\n                    <NavButton />\r\n                    <NavClearBoard names={[\"Clear Board\"]} handlers={[buttonEvent.ClearBoard]} />\r\n                    <NavLink names={[\"Clear Walls & Weights\"]} handlers={[buttonEvent.ClearWalls]} />\r\n                    <NavLink names={[\"Clear Path\"]} handlers={[buttonEvent.ClearPath]} />\r\n                    <DropdownSpeed />\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Header\r\n","\nexport function RestrictComp(algorithm){\n\n    switch (algorithm.get) {\n        case \"Algorithm_Dijkstra\":\n            return { wall: true, weight: true, bomb: true }\n        case \"Algorithm_AStar\":\n            return { wall: true, weight: true, bomb: true }\n        case \"Algorithm_Greedy_Best_First\":\n            return { wall: true, weight: true, bomb: true }\n        case \"Algorithm_Swarm\":\n            return { wall: true, weight: true, bomb: true }\n        case \"Algorithm_Convergent_Swarm\":\n            return { wall: true, weight: true, bomb: true }\n        case \"Algorithm_Bidrectional_Swarm\":\n            return { wall: true, weight: true, bomb: false }\n        case \"Algorithm_Breadth_First\":\n            return { wall: true, weight: false, bomb: true }\n        case \"Algorithm_Depth_First\":\n            return { wall: true, weight: false, bomb: true }\n        default:\n            return { wall: true, weight: true, bomb: true }\n    }   \n}","import { componentKind, keyboardSupport, weightValueRange } from './TableIndex'\nimport { position } from '../../Core/index'\nimport { RestrictComp } from './RestrictComp'\n\n\nexport function KeyboardEvent(event, algorithm, weightValue = null) {\n    // console.log(\"KeyboardEvent\")\n\n    if(RestrictComp(algorithm).weight){\n        if(event.key === keyboardSupport.w){\n            if(componentKind.add === componentKind.wall){\n                componentKind.add = componentKind.weight\n                keyboardSupport.down = false\n            }else{\n                componentKind.add = componentKind.wall\n                keyboardSupport.down = true\n            }\n    \n        }else if(event.key === keyboardSupport.plus && position.weightValue + weightValueRange.increase <= weightValueRange.max){\n            if(weightValue != null){\n                weightValue.set(\"+\")\n                keyboardSupport.down = false\n            }else{\n                keyboardSupport.down = true\n            }\n    \n        }else if(event.key === keyboardSupport.sub && position.weightValue - weightValueRange.increase >= weightValueRange.min){\n            if(weightValue != null){\n                weightValue.set(\"-\")\n                keyboardSupport.down = false\n            }else{\n                keyboardSupport.down = true\n            }\n    \n        }else if(event.key === keyboardSupport.plus || event.key === keyboardSupport.sub){\n            if(weightValue != null){\n                weightValue.set(!weightValue.get.status)\n                keyboardSupport.down = false\n            }else{\n                keyboardSupport.down = true\n            }\n        }\n    \n    }\n\n    // console.log(position.weightValue)\n\n}\n","import { useContext, useEffect } from 'react'\nimport { sysStatusContext, algorithmContext, speedContext } from '../../Core/index'\nimport { tableVar, touchContext, moveContext, updateContext, weightValueContext, componentKind, keyboardSupport, synchronize } from './TableIndex'\nimport { setTable } from './SetTable'\nimport { UpdateTable } from './UpdateTable'\nimport { WhichComponent } from './WhichComp'\nimport { KeyboardEvent } from './KeyboardEvent'\nimport ButtonEvent from './ButtonEvent'\n\n\nfunction MouseEvent() {\n    const [touch, move, update, weightValue] = [useContext(touchContext), useContext(moveContext), useContext(updateContext), useContext(weightValueContext)]\n    const [algorithm, speed, sysStatus] = [useContext(algorithmContext), useContext(speedContext), useContext(sysStatusContext)]\n    const buttonEvent = ButtonEvent()\n\n    useEffect(() => {\n        synchronize.algorithm = algorithm\n        // eslint-disable-next-line\n    }, [algorithm.get])\n\n    document.addEventListener('keydown', function(event) {\n        if(keyboardSupport.down){\n            KeyboardEvent(event, synchronize.algorithm, weightValue)\n        }\n    })\n    document.addEventListener('keyup', function(event) {\n        if(keyboardSupport.down === false){\n            KeyboardEvent(event, synchronize.algorithm)\n        }\n    })\n\n    const MouseDownHandler = (e) => {\n        // console.log(\"MouseDownHandler \" + e.target.id)\n\n        if (sysStatus.get !== \"IDLE\") {\n            return\n        }\n\n        e.preventDefault()\n\n        tableVar.id = parseInt(e.target.id)\n        const whichComponent = WhichComponent(tableVar.id, touch)\n\n        if(whichComponent.type){\n            setTable(tableVar.id, whichComponent.rKind, true)\n            move.set(componentKind.add)\n\n        }else{\n            move.set(whichComponent.kind)\n        }\n    }\n\n    const MouseUpHandler = (e) => {\n        // console.log(\"MouseUpHandler \" + e.target.id)\n\n        if (sysStatus.get !== \"IDLE\") {\n            return\n        }\n\n        move.set(\"\")\n\n        if(update.get && move.get !== \"\"){\n            UpdateTable(buttonEvent.Start, buttonEvent.ClearPath, algorithm, speed)\n        }\n    }\n\n    const OnMouseEnterHanlder = (e) => {\n        // console.log(\"OnMouseEnterHanlder \" + e.target.id)\n\n        if (sysStatus.get !== \"IDLE\") {\n            return\n        }\n\n        tableVar.newId = parseInt(e.target.id)\n        const whichOldComponent = WhichComponent(tableVar.id, touch)\n        const whichNewComponent = WhichComponent(tableVar.newId, touch)\n\n        if(move.get === componentKind.add && whichNewComponent.type){\n            setTable(tableVar.newId, whichNewComponent.rKind, true)\n            tableVar.id = parseInt(tableVar.newId)\n\n        }else if(move.get !== componentKind.add && move.get !== \"\" && whichNewComponent.type){\n            setTable(tableVar.id, whichOldComponent.touch, true)\n            touch.set({componentKind: whichOldComponent.kind, under: whichNewComponent.kind})\n            setTable(tableVar.newId, whichOldComponent.kind, true)\n            tableVar.id = parseInt(tableVar.newId)\n        }\n\n        if(update.get && move.get !== \"\"){\n            UpdateTable(buttonEvent.Start, buttonEvent.ClearPath, algorithm, speed)\n        }\n    }\n\n    return {MouseDownHandler, MouseUpHandler, OnMouseEnterHanlder}\n\n}\n\nexport default MouseEvent","import { useEffect } from 'react'\nimport MouseEvent from './MouseEvent'\nimport { tableVar, componentKind } from './TableIndex'\n\n\nfunction TableUI() {\n    const [rowSize, colSize, size] = [tableVar.rowSize, tableVar.colSize, tableVar.size]\n\n    const row = Array.from(Array(rowSize).keys())\n    const col = Array.from(Array(colSize).keys())\n\n    const mouesEvent = MouseEvent()\n    const [MouseDownHandler, MouseUpHandler, OnMouseEnterHanlder] = [mouesEvent.MouseDownHandler, mouesEvent.MouseUpHandler, mouesEvent.OnMouseEnterHanlder]\n\n    const createTable = row.map((rowIndex, index) => {\n        return ( \n            <tr key = {index} height={size}>\n                {col.map((colIndex, index) => {\n                    // console.log(rowIndex + \" \" + colIndex)\n                    return (\n                        <td id = {rowIndex * colSize + colIndex} key = {index} className = {componentKind.background} width={size} onMouseUp = {MouseUpHandler} onMouseDown = {MouseDownHandler} onMouseEnter = {OnMouseEnterHanlder}>\n                            {}\n                        </td>)}\n                    )}\n            </tr>)}\n        )\n\n    useEffect(() => {\n        document.getElementById((Math.floor(tableVar.rowSize / 2) * tableVar.colSize + Math.floor(tableVar.colSize / 4)).toString()).className = componentKind.start\n        document.getElementById((Math.floor(tableVar.rowSize / 2 + 1) * tableVar.colSize - Math.floor(tableVar.colSize / 4)).toString()).className = componentKind.end\n    }, [])\n    \n    \n      \n    return (\n        <div className = \"tablePadding\">\n            <table id = \"board\" align=\"center\" border=\"1\" cellSpacing=\"0\">\n                <tbody>\n                    {createTable}\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nexport default TableUI\n","import React, { useEffect, useContext, useState } from 'react'\nimport { weightValueContext, weightValueRange } from './TableIndex'\nimport Modal from 'react-bootstrap/Modal';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport ProgressBar from 'react-bootstrap/ProgressBar';\n\n\nfunction WeightModal() {\n    // console.log(\"WeightModal\")\n    const weightValue = useContext(weightValueContext)\n    const [initShow, setInitShow] = useState(false)\n    const [show, setShow] = useState(0)\n    \n    useEffect(() => {\n        if(initShow){\n            setShow(show => show + 1)\n            setTimeout(() => {\n                setShow(show => {\n                    if(show === 0){\n                        return 0\n                    }else{\n                        return show - 1\n                    }\n                })\n            }, weightValueRange.waiting)\n        }\n        setInitShow(true)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [weightValue.get])\n\n    const handleClose = () => {\n        setShow(0)\n    }\n\n    return (\n        <div>\n            <Modal show = {show > 0} size = \"sm\" onHide = {handleClose} dialogClassName = \"weightModal\">\n                <Modal.Body>\n                    <Row>\n                        <Col xs = {1}><div className = \"weightImage\"/></Col>\n                        <Col><ProgressBar className = \"progress\" now={weightValue.get.value} label={weightValue.get.value} /></Col>\n                    </Row>    \n                </Modal.Body>\n            </Modal>\n        </div>\n    )\n}\n\nexport default WeightModal\n","import TableUI from './TableHelper/TableUI';\nimport { useContext, useEffect } from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\nimport { sysStatusContext } from '../Core';\nimport WeightModal from './TableHelper/WeightModal';\n\nfunction Table() {  \n\tconst sysStatus = useContext(sysStatusContext);\n\n\tuseEffect(()=>{\n\t\tsetTimeout(()=>{sysStatus.set(\"IDLE\");}, 1000);\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [])\n\t\n\n\tif (sysStatus.get === \"LOADING\"){\n\t\treturn (<Spinner animation=\"border\" variant=\"warning\" />);\n\t}\n\telse{\n\t\treturn (\n\t        <div id = \"UI\">\n\t            <TableUI/>\n\t\t\t\t<WeightModal />\n\t        </div>\n\t    )\n\t}\n}\n\nexport default Table\n","import { useState, useContext, useEffect } from 'react';\nimport { algorithmContext } from '../../Core';\n\nfunction Info() {\n\tconst [bannedBomb, setBannedBomb] = useState(\"\");\n\tconst [bannedBFSDFS, setBannedBFSDFS] = useState(\"\");\n\tconst algoContext = useContext(algorithmContext);\n\n\tuseEffect(() => {\n\t\tif (algoContext.get === \"Algorithm_Bidrectional_Swarm\") {\n\t\t\tsetBannedBomb(\"banned\");\n\t\t} else {\n\t\t\tsetBannedBomb(\"\");\n\t\t}\n\n\t\tif (algoContext.get === \"Algorithm_Breadth_First\" || algoContext.get === \"Algorithm_Depth_First\") {\n\t\t\tsetBannedBFSDFS(\"banned\");\n\t\t} else {\n\t\t\tsetBannedBFSDFS(\"\");\n\t\t}\n\t}, [algoContext.get])\n\n\treturn (\n\t\t<div id=\"mainInfo\">\n\t\t\t<ul>\n\t\t\t\t<li> <div className=\"Info-Start-Node\"></div>Start Node </li>\n\t\t\t\t<li> <div className=\"Info-End-Node\"></div>Target Node </li>\n\t\t\t\t<li className={bannedBomb}> <div className=\"Info-Bomb-Node\"></div>Bomb Node </li>\n\t\t\t\t<li className={bannedBFSDFS}> <div className=\"Info-Weight-Node\"></div>Weight Node </li>\n\t\t\t\t<li> <div className=\"Info-Unvisited-Node\"></div>Unvisited Node </li>\n\t\t\t\t<li> <div className=\"Info-Visited-Node\"></div><div className=\"Info-Visited1-Node\"></div>Visited Node </li>\n\t\t\t\t<li> <div className=\"Info-ShortestPathNode-Node\"></div>Shortest-Path Node </li>\n\t\t\t\t<li> <div className=\"Info-WallNode-Node\"></div>Wall Node </li>\n\t\t\t</ul>\n\t\t</div>\n\t)\n}\n\nexport default Info;","import { useState, useContext, useEffect } from 'react';\nimport { algorithmContext } from '../../Core';\n\nfunction AlgorithmDescriptor() {\n    const [algorithmName, setAlgorithmName] = useState('Pick an algorithm and visualize it!');\n    const [discription1, setDiscription1] = useState('');\n    const [discription2, setDiscription2] = useState('');\n    const algoContext = useContext(algorithmContext);\n\n    useEffect(() => {\n        var algoName = \"\";\n        var d1 = \"\";\n        var d2 = \"\";\n        switch (algoContext.get) {\n            case \"Algorithm_Dijkstra\":\n                algoName = \"Dijkstra's Algorithm\";\n                d1 = \"weighted\";\n                d2 = \"guarantees\";\n                break;\n            case 'Algorithm_AStar':\n                algoName = \"A* Search\";\n                d1 = \"weighted\";\n                d2 = \"guarantees\";\n                break;\n            case \"Algorithm_Greedy_Best_First\":\n                algoName = \"Greedy Best-first Search\";\n                d1 = \"weighted\";\n                d2 = \"does not guarantee\";\n                break;\n            case \"Algorithm_Swarm\":\n                algoName = \"Swarm Algorithm\";\n                d1 = \"weighted\";\n                d2 = \"does not guarantee\";\n                break;\n            case \"Algorithm_Convergent_Swarm\":\n                algoName = \"Convergent Swarm Algorithm\";\n                d1 = \"weighted\";\n                d2 = \"does not guarantee\";\n                break;\n            case \"Algorithm_Bidrectional_Swarm\":\n                algoName = \"Bidrectional Swarm Algorithm\";\n                d1 = \"weighted\";\n                d2 = \"does not guarantee\";\n                break;\n            case \"Algorithm_Breadth_First\":\n                algoName = \"Breath-first Search\";\n                d1 = \"unweighted\";\n                d2 = \"guarantee\";\n                break;\n            case \"Algorithm_Depth_First\":\n                algoName = \"Depth-first Search\";\n                d1 = \"unweighted\";\n                d2 = \"does not guarantee\";\n                break;\n            default:\n                algoName = \"Pick an algorithm and visualize it!\";\n                d1 = \"\";\n                d2 = \"\";\n                break;\n        }\n\n        setAlgorithmName(algoName);\n        setDiscription1(d1);\n        setDiscription2(d2);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [algoContext.get])\n\n    if (algoContext.get === \"\") {\n        return (\n            <div id=\"algorithmDescriptor\">\n                {algorithmName}\n            </div>\n        )\n    } else {\n        return (\n            <div id=\"algorithmDescriptor\">\n                <i>{algorithmName}</i> is <b>{discription1}</b> and <b>{discription2}</b> the shortest path!\n            </div>\n        )\n    }\n\n}\n\nexport default AlgorithmDescriptor;","import React, { useState } from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport data from '../../Resources/Data/Modalnfo.json';\nimport BootstrapSwitchButton from 'bootstrap-switch-button-react'\n\nfunction IntroductionModal() {\n    const [pages, setPages] = useState(1);\n    const [show, setShow] = useState(true);\n    const [language, setLanguage] = useState(0);\n    const [checked, setChecked] = useState(true);\n    const maxPages = data.length;\n\n    const HandlePrevious = () => {\n        setPages(prePage => prePage - 1 >= 1 ? prePage - 1 : prePage);\n    }\n\n    const HandleNext = () => {\n        if (pages + 1 > maxPages) {\n            setShow(false);\n            return;\n        }\n        setPages(prePage => prePage + 1 <= maxPages ? prePage + 1 : prePage);\n    }\n\n    return (\n        <Modal show={show} size='xl' backdrop=\"static\" centered dialogClassName=\"Modal\">\n            <div className=\"ml-auto Modal-Page\">{`${pages}/${maxPages}`}</div>\n            <div className=\"Modal-Title\">{data[pages - 1][\"Title\"][language]}</div>\n\n            <Modal.Body className=\"Modal-Body\">\n                <p className=\"Modal-BodyText\">{data[pages - 1][\"Dialog\"][language]}</p>\n                <p className=\"Modal-BodyText1\">{data[pages - 1][\"Body\"][language]}</p>\n                {pages === 1 ? <div className=\"Logo\"></div> : null}\n                {pages === 2 ? <div className=\"ShortestPath\"></div> : null}\n                {pages === 3 ? <div className=\"Algorithm\"></div> : null}\n                {pages === 4 ? <div className=\"Maze\"></div> : null}\n                {pages === 5 ? <div className=\"WallWeight\"></div> : null}\n                {pages === 6 ? <div className=\"AddBomb\"></div> : null}\n                {pages === 7 ? <div className=\"StartDrag\"></div> : null}\n                {pages === 8 ? <div className=\"Other\"></div> : null}\n                {pages === 9 ? (language === 1 ? <p className=\"Modal-BodyText1\">本專案由 <a href=\"https://github.com/novayo\">novayo</a> 及 <a href=\"https://github.com/ChengTsungPao\">ChengTsungPao</a> 共同製作</p> : <p className=\"Modal-BodyText1\">This application made by <a href=\"https://github.com/novayo\">novayo</a> and <a href=\"https://github.com/ChengTsungPao\">ChengTsungPao</a>.</p>) : null}\n            </Modal.Body>\n\n            <Modal.Footer>\n                <Button className=\"mr-auto Button\" variant='outline-success' size=\"md\" onClick={() => setShow(false)}>Skip Tutorial</Button>\n                <BootstrapSwitchButton\n                    checked={checked}\n                    onlabel='En'\n                    onstyle='outline-info'\n                    offlabel='Ch'\n                    offstyle='outline-success'\n                    size=\"md\" // eslint-disable-next-line \n                    style='mr-auto' // 這裡會有怪怪的warning，所以加上上面的註解去除warning\n                    onChange={(checked) => {\n                        if (checked) {\n                            setLanguage(0);\n                        } else {\n                            setLanguage(1);\n                        }\n                        setChecked(pre => !pre);\n                    }}\n                />\n                <Button className=\"Button\" variant='outline-success' size=\"md\" onClick={() => HandlePrevious()}>Previous</Button>\n                <Button className=\"Button\" variant='outline-success' size=\"md\" onClick={() => HandleNext()}>Next</Button>\n            </Modal.Footer>\n        </Modal>\n    )\n}\n\nexport default IntroductionModal\n","import './App.scss';\nimport { useReducer } from 'react';\nimport Header from './Frontend/Header';\nimport { algorithmReducer, initialAlgorithm, algorithmContext } from './Core';\nimport { sysStatusReducer, initialsysStatus, sysStatusContext } from './Core';\nimport { bombContext, bombInitial, bombReducer } from './Core';\nimport { speedContext, speedInitial, speedReducer } from './Core';\nimport Table from './Frontend/Table';\nimport { touchReducer, touchInitial, touchContext } from './Frontend/TableHelper/TableIndex';\nimport { moveReducer, moveInitial, moveContext } from './Frontend/TableHelper/TableIndex';\nimport { weightValueReducer, weightValueInitial, weightValueContext } from './Frontend/TableHelper/TableIndex';\nimport { updateReducer, updateInitial, updateContext } from './Frontend/TableHelper/TableIndex';\nimport Info from './Frontend/HeaderHelper/Info';\nimport AlgorithmDescriptor from './Frontend/HeaderHelper/AlgorithmDescriptor';\nimport IntroductionModal from './Frontend/HeaderHelper/IntroductionModal';\n\nfunction App() {\n  const [curAlgorithm, setCurAlgorithm] = useReducer(algorithmReducer, initialAlgorithm);\n  const [curSysStatus, setCurSysStatus] = useReducer(sysStatusReducer, initialsysStatus);\n  const [curBomb, setCurBomb] = useReducer(bombReducer, bombInitial);\n  const [curSpeed, setCurSpeed] = useReducer(speedReducer, speedInitial);\n  const [touch, setTouch] = useReducer(touchReducer, touchInitial)\n  const [move, setMove] = useReducer(moveReducer, moveInitial)\n  const [update, setUpdate] = useReducer(updateReducer, updateInitial)\n  const [weightValue, setWeightValue] = useReducer(weightValueReducer, weightValueInitial)\n\n  return (\n    <div className=\"App\">\n      <IntroductionModal />\n      <weightValueContext.Provider value={{ get: weightValue, set: setWeightValue }}>\n        <updateContext.Provider value={{ get: update, set: setUpdate }}>\n          <moveContext.Provider value={{ get: move, set: setMove }}>\n            <touchContext.Provider value={{ get: touch, set: setTouch }}>\n              <speedContext.Provider value={{ get: curSpeed, set: setCurSpeed }}>\n                <bombContext.Provider value={{ get: curBomb, set: setCurBomb }}>\n                  <sysStatusContext.Provider value={{ get: curSysStatus, set: setCurSysStatus }}>\n                    <algorithmContext.Provider value={{ get: curAlgorithm, set: setCurAlgorithm }}>\n                      <Header />\n                      <Info />\n                      <AlgorithmDescriptor />\n                      <Table />\n                    </algorithmContext.Provider>\n                  </sysStatusContext.Provider>\n                </bombContext.Provider>\n              </speedContext.Provider>\n            </touchContext.Provider>\n          </moveContext.Provider>\n        </updateContext.Provider>\n      </weightValueContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}